{"level":"error","message":"Error: Error: Format file tidak diperbolehkan\n    at fileFilter (E:\\Full-Stack Developer\\E-Commerce Project 1.1\\backend\\src\\middlewares\\upload.js:30:17)\n    at wrappedFileFilter (E:\\Full-Stack Developer\\E-Commerce Project 1.1\\backend\\node_modules\\multer\\index.js:44:7)\n    at Multipart.<anonymous> (E:\\Full-Stack Developer\\E-Commerce Project 1.1\\backend\\node_modules\\multer\\lib\\make-middleware.js:107:7)\n    at Multipart.emit (node:events:524:28)\n    at HeaderParser.cb (E:\\Full-Stack Developer\\E-Commerce Project 1.1\\backend\\node_modules\\busboy\\lib\\types\\multipart.js:358:14)\n    at HeaderParser.push (E:\\Full-Stack Developer\\E-Commerce Project 1.1\\backend\\node_modules\\busboy\\lib\\types\\multipart.js:162:20)\n    at SBMH.ssCb [as _cb] (E:\\Full-Stack Developer\\E-Commerce Project 1.1\\backend\\node_modules\\busboy\\lib\\types\\multipart.js:394:37)\n    at feed (E:\\Full-Stack Developer\\E-Commerce Project 1.1\\backend\\node_modules\\streamsearch\\lib\\sbmh.js:219:14)\n    at SBMH.push (E:\\Full-Stack Developer\\E-Commerce Project 1.1\\backend\\node_modules\\streamsearch\\lib\\sbmh.js:104:16)\n    at Multipart._write (E:\\Full-Stack Developer\\E-Commerce Project 1.1\\backend\\node_modules\\busboy\\lib\\types\\multipart.js:567:19)","timestamp":"2025-02-20T07:38:19.971Z"}
{"level":"error","message":"Error: PrismaClientKnownRequestError: \nInvalid `prisma.product.findMany()` invocation in\nE:\\Full-Stack Developer\\E-Commerce Project 1.1\\backend\\src\\controllers\\productController.js:37:43\n\n  34 const pageSize = parseInt(limit, 10) || 10;\n  35 const skip = (pageNumber - 1) * pageSize;\n  36 \n→ 37 const products = await prisma.product.findMany(\nCan't reach database server at `localhost:5432`\n\nPlease make sure your database server is running at `localhost:5432`.\n    at Bn.handleRequestError (E:\\Full-Stack Developer\\E-Commerce Project 1.1\\backend\\node_modules\\@prisma\\client\\runtime\\library.js:121:7362)\n    at Bn.handleAndLogRequestError (E:\\Full-Stack Developer\\E-Commerce Project 1.1\\backend\\node_modules\\@prisma\\client\\runtime\\library.js:121:6686)\n    at Bn.request (E:\\Full-Stack Developer\\E-Commerce Project 1.1\\backend\\node_modules\\@prisma\\client\\runtime\\library.js:121:6393)\n    at async l (E:\\Full-Stack Developer\\E-Commerce Project 1.1\\backend\\node_modules\\@prisma\\client\\runtime\\library.js:130:9645)\n    at async exports.getProducts (E:\\Full-Stack Developer\\E-Commerce Project 1.1\\backend\\src\\controllers\\productController.js:37:22)","timestamp":"2025-02-27T04:20:38.989Z"}
{"level":"error","message":"Error: PrismaClientKnownRequestError: \nInvalid `prisma.category.findMany()` invocation in\nE:\\Full-Stack Developer\\E-Commerce Project 1.1\\backend\\src\\controllers\\categoryController.js:26:46\n\n  23 \n  24 exports.getAllCategories = async (req, res, next) => {\n  25   try {\n→ 26     const categories = await prisma.category.findMany(\nCan't reach database server at `localhost:5432`\n\nPlease make sure your database server is running at `localhost:5432`.\n    at Bn.handleRequestError (E:\\Full-Stack Developer\\E-Commerce Project 1.1\\backend\\node_modules\\@prisma\\client\\runtime\\library.js:121:7362)\n    at Bn.handleAndLogRequestError (E:\\Full-Stack Developer\\E-Commerce Project 1.1\\backend\\node_modules\\@prisma\\client\\runtime\\library.js:121:6686)\n    at Bn.request (E:\\Full-Stack Developer\\E-Commerce Project 1.1\\backend\\node_modules\\@prisma\\client\\runtime\\library.js:121:6393)\n    at async l (E:\\Full-Stack Developer\\E-Commerce Project 1.1\\backend\\node_modules\\@prisma\\client\\runtime\\library.js:130:9645)\n    at async exports.getAllCategories (E:\\Full-Stack Developer\\E-Commerce Project 1.1\\backend\\src\\controllers\\categoryController.js:26:24)","timestamp":"2025-02-27T04:20:40.358Z"}
{"level":"error","message":"Error: PrismaClientKnownRequestError: \nInvalid `prisma.article.findMany()` invocation in\nE:\\Full-Stack Developer\\E-Commerce Project 1.1\\backend\\src\\controllers\\articleController.js:69:43\n\n  66   };\n  67 }\n  68 \n→ 69 const articles = await prisma.article.findMany(\nCan't reach database server at `localhost:5432`\n\nPlease make sure your database server is running at `localhost:5432`.\n    at Bn.handleRequestError (E:\\Full-Stack Developer\\E-Commerce Project 1.1\\backend\\node_modules\\@prisma\\client\\runtime\\library.js:121:7362)\n    at Bn.handleAndLogRequestError (E:\\Full-Stack Developer\\E-Commerce Project 1.1\\backend\\node_modules\\@prisma\\client\\runtime\\library.js:121:6686)\n    at Bn.request (E:\\Full-Stack Developer\\E-Commerce Project 1.1\\backend\\node_modules\\@prisma\\client\\runtime\\library.js:121:6393)\n    at async l (E:\\Full-Stack Developer\\E-Commerce Project 1.1\\backend\\node_modules\\@prisma\\client\\runtime\\library.js:130:9645)\n    at async exports.getArticles (E:\\Full-Stack Developer\\E-Commerce Project 1.1\\backend\\src\\controllers\\articleController.js:69:22)","timestamp":"2025-02-27T04:20:41.541Z"}
{"level":"error","message":"Error: PrismaClientInitializationError: \nInvalid `prisma.heroImage.findMany()` invocation in\nE:\\Full-Stack Developer\\E-Commerce Project 1.1\\backend\\src\\controllers\\heroImageController.js:25:47\n\n  22 // Get All Hero Images\n  23 exports.getHeroImages = async (req, res, next) => {\n  24   try {\n→ 25     const heroImages = await prisma.heroImage.findMany(\nCan't reach database server at `localhost:5432`\n\nPlease make sure your database server is running at `localhost:5432`.\n    at Bn.handleRequestError (E:\\Full-Stack Developer\\E-Commerce Project 1.1\\backend\\node_modules\\@prisma\\client\\runtime\\library.js:121:7663)\n    at Bn.handleAndLogRequestError (E:\\Full-Stack Developer\\E-Commerce Project 1.1\\backend\\node_modules\\@prisma\\client\\runtime\\library.js:121:6686)\n    at Bn.request (E:\\Full-Stack Developer\\E-Commerce Project 1.1\\backend\\node_modules\\@prisma\\client\\runtime\\library.js:121:6393)\n    at async l (E:\\Full-Stack Developer\\E-Commerce Project 1.1\\backend\\node_modules\\@prisma\\client\\runtime\\library.js:130:9645)\n    at async exports.getHeroImages (E:\\Full-Stack Developer\\E-Commerce Project 1.1\\backend\\src\\controllers\\heroImageController.js:25:24)","timestamp":"2025-02-27T04:29:08.188Z"}
{"level":"error","message":"Error: PrismaClientInitializationError: \nInvalid `prisma.product.findMany()` invocation in\nE:\\Full-Stack Developer\\E-Commerce Project 1.1\\backend\\src\\controllers\\productController.js:37:43\n\n  34 const pageSize = parseInt(limit, 10) || 10;\n  35 const skip = (pageNumber - 1) * pageSize;\n  36 \n→ 37 const products = await prisma.product.findMany(\nCan't reach database server at `localhost:5432`\n\nPlease make sure your database server is running at `localhost:5432`.\n    at Bn.handleRequestError (E:\\Full-Stack Developer\\E-Commerce Project 1.1\\backend\\node_modules\\@prisma\\client\\runtime\\library.js:121:7663)\n    at Bn.handleAndLogRequestError (E:\\Full-Stack Developer\\E-Commerce Project 1.1\\backend\\node_modules\\@prisma\\client\\runtime\\library.js:121:6686)\n    at Bn.request (E:\\Full-Stack Developer\\E-Commerce Project 1.1\\backend\\node_modules\\@prisma\\client\\runtime\\library.js:121:6393)\n    at async l (E:\\Full-Stack Developer\\E-Commerce Project 1.1\\backend\\node_modules\\@prisma\\client\\runtime\\library.js:130:9645)\n    at async exports.getProducts (E:\\Full-Stack Developer\\E-Commerce Project 1.1\\backend\\src\\controllers\\productController.js:37:22)","timestamp":"2025-02-27T04:29:09.572Z"}
{"level":"error","message":"Error: PrismaClientKnownRequestError: \nInvalid `prisma.product.delete()` invocation in\nE:\\Full-Stack Developer\\E-Commerce Project 1.1\\backend\\src\\controllers\\adminController.js:50:32\n\n  47 exports.deleteProduct = async (req, res, next) => {\n  48   try {\n  49     const productId = parseInt(req.params.id);\n→ 50     await prisma.product.delete(\nAn operation failed because it depends on one or more records that were required but not found. Record to delete does not exist.\n    at Bn.handleRequestError (E:\\Full-Stack Developer\\E-Commerce Project 1.1\\backend\\node_modules\\@prisma\\client\\runtime\\library.js:121:7362)\n    at Bn.handleAndLogRequestError (E:\\Full-Stack Developer\\E-Commerce Project 1.1\\backend\\node_modules\\@prisma\\client\\runtime\\library.js:121:6686)\n    at Bn.request (E:\\Full-Stack Developer\\E-Commerce Project 1.1\\backend\\node_modules\\@prisma\\client\\runtime\\library.js:121:6393)\n    at async l (E:\\Full-Stack Developer\\E-Commerce Project 1.1\\backend\\node_modules\\@prisma\\client\\runtime\\library.js:130:9645)\n    at async exports.deleteProduct (E:\\Full-Stack Developer\\E-Commerce Project 1.1\\backend\\src\\controllers\\adminController.js:50:5)","timestamp":"2025-03-07T10:39:08.280Z"}
{"level":"error","message":"Error: PrismaClientKnownRequestError: \nInvalid `prisma.product.delete()` invocation in\nE:\\Full-Stack Developer\\E-Commerce Project 1.1\\backend\\src\\controllers\\adminController.js:50:32\n\n  47 exports.deleteProduct = async (req, res, next) => {\n  48   try {\n  49     const productId = parseInt(req.params.id);\n→ 50     await prisma.product.delete(\nForeign key constraint violated: `Review_productId_fkey (index)`\n    at Bn.handleRequestError (E:\\Full-Stack Developer\\E-Commerce Project 1.1\\backend\\node_modules\\@prisma\\client\\runtime\\library.js:121:7362)\n    at Bn.handleAndLogRequestError (E:\\Full-Stack Developer\\E-Commerce Project 1.1\\backend\\node_modules\\@prisma\\client\\runtime\\library.js:121:6686)\n    at Bn.request (E:\\Full-Stack Developer\\E-Commerce Project 1.1\\backend\\node_modules\\@prisma\\client\\runtime\\library.js:121:6393)\n    at async l (E:\\Full-Stack Developer\\E-Commerce Project 1.1\\backend\\node_modules\\@prisma\\client\\runtime\\library.js:130:9645)\n    at async exports.deleteProduct (E:\\Full-Stack Developer\\E-Commerce Project 1.1\\backend\\src\\controllers\\adminController.js:50:5)","timestamp":"2025-03-07T10:47:54.435Z"}
{"level":"error","message":"Error: PrismaClientKnownRequestError: \nInvalid `prisma.product.delete()` invocation in\nE:\\Full-Stack Developer\\E-Commerce Project 1.1\\backend\\src\\controllers\\adminController.js:50:32\n\n  47 exports.deleteProduct = async (req, res, next) => {\n  48   try {\n  49     const productId = parseInt(req.params.id);\n→ 50     await prisma.product.delete(\nForeign key constraint violated: `Review_productId_fkey (index)`\n    at Bn.handleRequestError (E:\\Full-Stack Developer\\E-Commerce Project 1.1\\backend\\node_modules\\@prisma\\client\\runtime\\library.js:121:7362)\n    at Bn.handleAndLogRequestError (E:\\Full-Stack Developer\\E-Commerce Project 1.1\\backend\\node_modules\\@prisma\\client\\runtime\\library.js:121:6686)\n    at Bn.request (E:\\Full-Stack Developer\\E-Commerce Project 1.1\\backend\\node_modules\\@prisma\\client\\runtime\\library.js:121:6393)\n    at async l (E:\\Full-Stack Developer\\E-Commerce Project 1.1\\backend\\node_modules\\@prisma\\client\\runtime\\library.js:130:9645)\n    at async exports.deleteProduct (E:\\Full-Stack Developer\\E-Commerce Project 1.1\\backend\\src\\controllers\\adminController.js:50:5)","timestamp":"2025-03-07T10:48:35.717Z"}
{"level":"error","message":"Error: PrismaClientKnownRequestError: \nInvalid `prisma.product.delete()` invocation in\nE:\\Full-Stack Developer\\E-Commerce Project 1.1\\backend\\src\\controllers\\productController.js:275:32\n\n  272 }\n  273 \n  274 // Hapus produk\n→ 275 await prisma.product.delete(\nForeign key constraint violated: `Review_productId_fkey (index)`\n    at Bn.handleRequestError (E:\\Full-Stack Developer\\E-Commerce Project 1.1\\backend\\node_modules\\@prisma\\client\\runtime\\library.js:121:7362)\n    at Bn.handleAndLogRequestError (E:\\Full-Stack Developer\\E-Commerce Project 1.1\\backend\\node_modules\\@prisma\\client\\runtime\\library.js:121:6686)\n    at Bn.request (E:\\Full-Stack Developer\\E-Commerce Project 1.1\\backend\\node_modules\\@prisma\\client\\runtime\\library.js:121:6393)\n    at async l (E:\\Full-Stack Developer\\E-Commerce Project 1.1\\backend\\node_modules\\@prisma\\client\\runtime\\library.js:130:9645)\n    at async exports.deleteProduct (E:\\Full-Stack Developer\\E-Commerce Project 1.1\\backend\\src\\controllers\\productController.js:275:5)","timestamp":"2025-03-07T11:11:59.347Z"}
{"level":"error","message":"Error: PrismaClientValidationError: \nInvalid `prisma.review.findMany()` invocation in\nE:\\Full-Stack Developer\\E-Commerce Project 1.1\\backend\\src\\controllers\\reviewController.js:108:41\n\n  105 // Mendapatkan semua review (tanpa pagination)\n  106 exports.getAllReviews = async (req, res, next) => {\n  107   try {\n→ 108     const reviews = await prisma.review.findMany({\n            include: {\n              user: {\n                select: {\n                  id: true,\n                  name: true,\n                  profilePicture: true\n                }\n              },\n              likes: true,\n              ~~~~~\n              replies: true,\n          ?   product?: true\n            }\n          })\n\nUnknown field `likes` for include statement on model `Review`. Available options are marked with ?.\n    at xn (E:\\Full-Stack Developer\\E-Commerce Project 1.1\\backend\\node_modules\\@prisma\\client\\runtime\\library.js:29:1363)\n    at Bn.handleRequestError (E:\\Full-Stack Developer\\E-Commerce Project 1.1\\backend\\node_modules\\@prisma\\client\\runtime\\library.js:121:7005)\n    at Bn.handleAndLogRequestError (E:\\Full-Stack Developer\\E-Commerce Project 1.1\\backend\\node_modules\\@prisma\\client\\runtime\\library.js:121:6686)\n    at Bn.request (E:\\Full-Stack Developer\\E-Commerce Project 1.1\\backend\\node_modules\\@prisma\\client\\runtime\\library.js:121:6393)\n    at async l (E:\\Full-Stack Developer\\E-Commerce Project 1.1\\backend\\node_modules\\@prisma\\client\\runtime\\library.js:130:9645)\n    at async exports.getAllReviews (E:\\Full-Stack Developer\\E-Commerce Project 1.1\\backend\\src\\controllers\\reviewController.js:108:21)","timestamp":"2025-03-08T09:14:09.487Z"}
{"level":"error","message":"Error: PrismaClientValidationError: \nInvalid `prisma.review.findMany()` invocation in\nE:\\Full-Stack Developer\\E-Commerce Project 1.1\\backend\\src\\controllers\\reviewController.js:108:41\n\n  105 // Mendapatkan semua review (tanpa pagination)\n  106 exports.getAllReviews = async (req, res, next) => {\n  107   try {\n→ 108     const reviews = await prisma.review.findMany({\n            include: {\n              user: {\n                select: {\n                  id: true,\n                  name: true,\n                  profilePicture: true\n                }\n              },\n              likes: true,\n              ~~~~~\n              replies: true,\n          ?   product?: true\n            }\n          })\n\nUnknown field `likes` for include statement on model `Review`. Available options are marked with ?.\n    at xn (E:\\Full-Stack Developer\\E-Commerce Project 1.1\\backend\\node_modules\\@prisma\\client\\runtime\\library.js:29:1363)\n    at Bn.handleRequestError (E:\\Full-Stack Developer\\E-Commerce Project 1.1\\backend\\node_modules\\@prisma\\client\\runtime\\library.js:121:7005)\n    at Bn.handleAndLogRequestError (E:\\Full-Stack Developer\\E-Commerce Project 1.1\\backend\\node_modules\\@prisma\\client\\runtime\\library.js:121:6686)\n    at Bn.request (E:\\Full-Stack Developer\\E-Commerce Project 1.1\\backend\\node_modules\\@prisma\\client\\runtime\\library.js:121:6393)\n    at async l (E:\\Full-Stack Developer\\E-Commerce Project 1.1\\backend\\node_modules\\@prisma\\client\\runtime\\library.js:130:9645)\n    at async exports.getAllReviews (E:\\Full-Stack Developer\\E-Commerce Project 1.1\\backend\\src\\controllers\\reviewController.js:108:21)","timestamp":"2025-03-08T09:14:09.619Z"}
{"level":"error","message":"Error: PrismaClientValidationError: \nInvalid `prisma.review.findMany()` invocation in\nE:\\Full-Stack Developer\\E-Commerce Project 1.1\\backend\\src\\controllers\\reviewController.js:108:41\n\n  105 // Mendapatkan semua review (tanpa pagination)\n  106 exports.getAllReviews = async (req, res, next) => {\n  107   try {\n→ 108     const reviews = await prisma.review.findMany({\n            include: {\n              user: {\n                select: {\n                  id: true,\n                  name: true,\n                  profilePicture: true\n                }\n              },\n              likes: true,\n              ~~~~~\n              replies: true,\n          ?   product?: true\n            }\n          })\n\nUnknown field `likes` for include statement on model `Review`. Available options are marked with ?.\n    at xn (E:\\Full-Stack Developer\\E-Commerce Project 1.1\\backend\\node_modules\\@prisma\\client\\runtime\\library.js:29:1363)\n    at Bn.handleRequestError (E:\\Full-Stack Developer\\E-Commerce Project 1.1\\backend\\node_modules\\@prisma\\client\\runtime\\library.js:121:7005)\n    at Bn.handleAndLogRequestError (E:\\Full-Stack Developer\\E-Commerce Project 1.1\\backend\\node_modules\\@prisma\\client\\runtime\\library.js:121:6686)\n    at Bn.request (E:\\Full-Stack Developer\\E-Commerce Project 1.1\\backend\\node_modules\\@prisma\\client\\runtime\\library.js:121:6393)\n    at async l (E:\\Full-Stack Developer\\E-Commerce Project 1.1\\backend\\node_modules\\@prisma\\client\\runtime\\library.js:130:9645)\n    at async exports.getAllReviews (E:\\Full-Stack Developer\\E-Commerce Project 1.1\\backend\\src\\controllers\\reviewController.js:108:21)","timestamp":"2025-03-08T09:14:10.069Z"}
{"level":"error","message":"Error: PrismaClientValidationError: \nInvalid `prisma.review.findMany()` invocation in\nE:\\Full-Stack Developer\\E-Commerce Project 1.1\\backend\\src\\controllers\\reviewController.js:108:41\n\n  105 // Mendapatkan semua review (tanpa pagination)\n  106 exports.getAllReviews = async (req, res, next) => {\n  107   try {\n→ 108     const reviews = await prisma.review.findMany({\n            include: {\n              user: {\n                select: {\n                  id: true,\n                  name: true,\n                  profilePicture: true\n                }\n              },\n              likes: true,\n              ~~~~~\n              replies: true,\n          ?   product?: true\n            }\n          })\n\nUnknown field `likes` for include statement on model `Review`. Available options are marked with ?.\n    at xn (E:\\Full-Stack Developer\\E-Commerce Project 1.1\\backend\\node_modules\\@prisma\\client\\runtime\\library.js:29:1363)\n    at Bn.handleRequestError (E:\\Full-Stack Developer\\E-Commerce Project 1.1\\backend\\node_modules\\@prisma\\client\\runtime\\library.js:121:7005)\n    at Bn.handleAndLogRequestError (E:\\Full-Stack Developer\\E-Commerce Project 1.1\\backend\\node_modules\\@prisma\\client\\runtime\\library.js:121:6686)\n    at Bn.request (E:\\Full-Stack Developer\\E-Commerce Project 1.1\\backend\\node_modules\\@prisma\\client\\runtime\\library.js:121:6393)\n    at async l (E:\\Full-Stack Developer\\E-Commerce Project 1.1\\backend\\node_modules\\@prisma\\client\\runtime\\library.js:130:9645)\n    at async exports.getAllReviews (E:\\Full-Stack Developer\\E-Commerce Project 1.1\\backend\\src\\controllers\\reviewController.js:108:21)","timestamp":"2025-03-08T09:14:11.168Z"}
{"level":"error","message":"Error: PrismaClientValidationError: \nInvalid `prisma.review.findMany()` invocation in\nE:\\Full-Stack Developer\\E-Commerce Project 1.1\\backend\\src\\controllers\\reviewController.js:108:41\n\n  105 // Mendapatkan semua review (tanpa pagination)\n  106 exports.getAllReviews = async (req, res, next) => {\n  107   try {\n→ 108     const reviews = await prisma.review.findMany({\n            include: {\n              user: {\n                select: {\n                  id: true,\n                  name: true,\n                  profilePicture: true\n                }\n              },\n              likes: true,\n              ~~~~~\n              replies: true,\n          ?   product?: true\n            }\n          })\n\nUnknown field `likes` for include statement on model `Review`. Available options are marked with ?.\n    at xn (E:\\Full-Stack Developer\\E-Commerce Project 1.1\\backend\\node_modules\\@prisma\\client\\runtime\\library.js:29:1363)\n    at Bn.handleRequestError (E:\\Full-Stack Developer\\E-Commerce Project 1.1\\backend\\node_modules\\@prisma\\client\\runtime\\library.js:121:7005)\n    at Bn.handleAndLogRequestError (E:\\Full-Stack Developer\\E-Commerce Project 1.1\\backend\\node_modules\\@prisma\\client\\runtime\\library.js:121:6686)\n    at Bn.request (E:\\Full-Stack Developer\\E-Commerce Project 1.1\\backend\\node_modules\\@prisma\\client\\runtime\\library.js:121:6393)\n    at async l (E:\\Full-Stack Developer\\E-Commerce Project 1.1\\backend\\node_modules\\@prisma\\client\\runtime\\library.js:130:9645)\n    at async exports.getAllReviews (E:\\Full-Stack Developer\\E-Commerce Project 1.1\\backend\\src\\controllers\\reviewController.js:108:21)","timestamp":"2025-03-08T09:14:18.620Z"}
{"level":"error","message":"Error: PrismaClientValidationError: \nInvalid `prisma.review.findMany()` invocation in\nE:\\Full-Stack Developer\\E-Commerce Project 1.1\\backend\\src\\controllers\\reviewController.js:108:41\n\n  105 // Mendapatkan semua review (tanpa pagination)\n  106 exports.getAllReviews = async (req, res, next) => {\n  107   try {\n→ 108     const reviews = await prisma.review.findMany({\n            include: {\n              user: {\n                select: {\n                  id: true,\n                  name: true,\n                  profilePicture: true\n                }\n              },\n              likes: true,\n              ~~~~~\n              replies: true,\n          ?   product?: true\n            }\n          })\n\nUnknown field `likes` for include statement on model `Review`. Available options are marked with ?.\n    at xn (E:\\Full-Stack Developer\\E-Commerce Project 1.1\\backend\\node_modules\\@prisma\\client\\runtime\\library.js:29:1363)\n    at Bn.handleRequestError (E:\\Full-Stack Developer\\E-Commerce Project 1.1\\backend\\node_modules\\@prisma\\client\\runtime\\library.js:121:7005)\n    at Bn.handleAndLogRequestError (E:\\Full-Stack Developer\\E-Commerce Project 1.1\\backend\\node_modules\\@prisma\\client\\runtime\\library.js:121:6686)\n    at Bn.request (E:\\Full-Stack Developer\\E-Commerce Project 1.1\\backend\\node_modules\\@prisma\\client\\runtime\\library.js:121:6393)\n    at async l (E:\\Full-Stack Developer\\E-Commerce Project 1.1\\backend\\node_modules\\@prisma\\client\\runtime\\library.js:130:9645)\n    at async exports.getAllReviews (E:\\Full-Stack Developer\\E-Commerce Project 1.1\\backend\\src\\controllers\\reviewController.js:108:21)","timestamp":"2025-03-08T09:14:18.714Z"}
{"level":"error","message":"Error: PrismaClientValidationError: \nInvalid `prisma.review.findMany()` invocation in\nE:\\Full-Stack Developer\\E-Commerce Project 1.1\\backend\\src\\controllers\\reviewController.js:108:41\n\n  105 // Mendapatkan semua review (tanpa pagination)\n  106 exports.getAllReviews = async (req, res, next) => {\n  107   try {\n→ 108     const reviews = await prisma.review.findMany({\n            include: {\n              user: {\n                select: {\n                  id: true,\n                  name: true,\n                  profilePicture: true\n                }\n              },\n              likes: true,\n              ~~~~~\n              replies: true,\n          ?   product?: true\n            }\n          })\n\nUnknown field `likes` for include statement on model `Review`. Available options are marked with ?.\n    at xn (E:\\Full-Stack Developer\\E-Commerce Project 1.1\\backend\\node_modules\\@prisma\\client\\runtime\\library.js:29:1363)\n    at Bn.handleRequestError (E:\\Full-Stack Developer\\E-Commerce Project 1.1\\backend\\node_modules\\@prisma\\client\\runtime\\library.js:121:7005)\n    at Bn.handleAndLogRequestError (E:\\Full-Stack Developer\\E-Commerce Project 1.1\\backend\\node_modules\\@prisma\\client\\runtime\\library.js:121:6686)\n    at Bn.request (E:\\Full-Stack Developer\\E-Commerce Project 1.1\\backend\\node_modules\\@prisma\\client\\runtime\\library.js:121:6393)\n    at async l (E:\\Full-Stack Developer\\E-Commerce Project 1.1\\backend\\node_modules\\@prisma\\client\\runtime\\library.js:130:9645)\n    at async exports.getAllReviews (E:\\Full-Stack Developer\\E-Commerce Project 1.1\\backend\\src\\controllers\\reviewController.js:108:21)","timestamp":"2025-03-08T09:14:22.521Z"}
{"level":"error","message":"Error: PrismaClientValidationError: \nInvalid `prisma.review.findMany()` invocation in\nE:\\Full-Stack Developer\\E-Commerce Project 1.1\\backend\\src\\controllers\\reviewController.js:108:41\n\n  105 // Mendapatkan semua review (tanpa pagination)\n  106 exports.getAllReviews = async (req, res, next) => {\n  107   try {\n→ 108     const reviews = await prisma.review.findMany({\n            include: {\n              user: {\n                select: {\n                  id: true,\n                  name: true,\n                  profilePicture: true\n                }\n              },\n              likes: true,\n              ~~~~~\n              replies: true,\n          ?   product?: true\n            }\n          })\n\nUnknown field `likes` for include statement on model `Review`. Available options are marked with ?.\n    at xn (E:\\Full-Stack Developer\\E-Commerce Project 1.1\\backend\\node_modules\\@prisma\\client\\runtime\\library.js:29:1363)\n    at Bn.handleRequestError (E:\\Full-Stack Developer\\E-Commerce Project 1.1\\backend\\node_modules\\@prisma\\client\\runtime\\library.js:121:7005)\n    at Bn.handleAndLogRequestError (E:\\Full-Stack Developer\\E-Commerce Project 1.1\\backend\\node_modules\\@prisma\\client\\runtime\\library.js:121:6686)\n    at Bn.request (E:\\Full-Stack Developer\\E-Commerce Project 1.1\\backend\\node_modules\\@prisma\\client\\runtime\\library.js:121:6393)\n    at async l (E:\\Full-Stack Developer\\E-Commerce Project 1.1\\backend\\node_modules\\@prisma\\client\\runtime\\library.js:130:9645)\n    at async exports.getAllReviews (E:\\Full-Stack Developer\\E-Commerce Project 1.1\\backend\\src\\controllers\\reviewController.js:108:21)","timestamp":"2025-03-08T09:14:22.560Z"}
{"level":"error","message":"Error: PrismaClientValidationError: \nInvalid `prisma.review.findMany()` invocation in\nE:\\Full-Stack Developer\\E-Commerce Project 1.1\\backend\\src\\controllers\\reviewController.js:108:41\n\n  105 // Mendapatkan semua review (tanpa pagination)\n  106 exports.getAllReviews = async (req, res, next) => {\n  107   try {\n→ 108     const reviews = await prisma.review.findMany({\n            include: {\n              user: {\n                select: {\n                  id: true,\n                  name: true,\n                  profilePicture: true\n                }\n              },\n              likes: true,\n              ~~~~~\n              replies: true,\n          ?   product?: true\n            }\n          })\n\nUnknown field `likes` for include statement on model `Review`. Available options are marked with ?.\n    at xn (E:\\Full-Stack Developer\\E-Commerce Project 1.1\\backend\\node_modules\\@prisma\\client\\runtime\\library.js:29:1363)\n    at Bn.handleRequestError (E:\\Full-Stack Developer\\E-Commerce Project 1.1\\backend\\node_modules\\@prisma\\client\\runtime\\library.js:121:7005)\n    at Bn.handleAndLogRequestError (E:\\Full-Stack Developer\\E-Commerce Project 1.1\\backend\\node_modules\\@prisma\\client\\runtime\\library.js:121:6686)\n    at Bn.request (E:\\Full-Stack Developer\\E-Commerce Project 1.1\\backend\\node_modules\\@prisma\\client\\runtime\\library.js:121:6393)\n    at async l (E:\\Full-Stack Developer\\E-Commerce Project 1.1\\backend\\node_modules\\@prisma\\client\\runtime\\library.js:130:9645)\n    at async exports.getAllReviews (E:\\Full-Stack Developer\\E-Commerce Project 1.1\\backend\\src\\controllers\\reviewController.js:108:21)","timestamp":"2025-03-08T09:14:24.339Z"}
{"level":"error","message":"Error: PrismaClientValidationError: \nInvalid `prisma.review.findMany()` invocation in\nE:\\Full-Stack Developer\\E-Commerce Project 1.1\\backend\\src\\controllers\\reviewController.js:108:41\n\n  105 // Mendapatkan semua review (tanpa pagination)\n  106 exports.getAllReviews = async (req, res, next) => {\n  107   try {\n→ 108     const reviews = await prisma.review.findMany({\n            include: {\n              user: {\n                select: {\n                  id: true,\n                  name: true,\n                  profilePicture: true\n                }\n              },\n              likes: true,\n              ~~~~~\n              replies: true,\n          ?   product?: true\n            }\n          })\n\nUnknown field `likes` for include statement on model `Review`. Available options are marked with ?.\n    at xn (E:\\Full-Stack Developer\\E-Commerce Project 1.1\\backend\\node_modules\\@prisma\\client\\runtime\\library.js:29:1363)\n    at Bn.handleRequestError (E:\\Full-Stack Developer\\E-Commerce Project 1.1\\backend\\node_modules\\@prisma\\client\\runtime\\library.js:121:7005)\n    at Bn.handleAndLogRequestError (E:\\Full-Stack Developer\\E-Commerce Project 1.1\\backend\\node_modules\\@prisma\\client\\runtime\\library.js:121:6686)\n    at Bn.request (E:\\Full-Stack Developer\\E-Commerce Project 1.1\\backend\\node_modules\\@prisma\\client\\runtime\\library.js:121:6393)\n    at async l (E:\\Full-Stack Developer\\E-Commerce Project 1.1\\backend\\node_modules\\@prisma\\client\\runtime\\library.js:130:9645)\n    at async exports.getAllReviews (E:\\Full-Stack Developer\\E-Commerce Project 1.1\\backend\\src\\controllers\\reviewController.js:108:21)","timestamp":"2025-03-08T09:14:24.435Z"}
{"level":"error","message":"Error: PrismaClientValidationError: \nInvalid `prisma.review.findMany()` invocation in\nE:\\Full-Stack Developer\\E-Commerce Project 1.1\\backend\\src\\controllers\\reviewController.js:108:41\n\n  105 // Mendapatkan semua review (tanpa pagination)\n  106 exports.getAllReviews = async (req, res, next) => {\n  107   try {\n→ 108     const reviews = await prisma.review.findMany({\n            include: {\n              user: {\n                select: {\n                  id: true,\n                  name: true,\n                  profilePicture: true\n                }\n              },\n              likes: true,\n              ~~~~~\n              replies: true,\n          ?   product?: true\n            }\n          })\n\nUnknown field `likes` for include statement on model `Review`. Available options are marked with ?.\n    at xn (E:\\Full-Stack Developer\\E-Commerce Project 1.1\\backend\\node_modules\\@prisma\\client\\runtime\\library.js:29:1363)\n    at Bn.handleRequestError (E:\\Full-Stack Developer\\E-Commerce Project 1.1\\backend\\node_modules\\@prisma\\client\\runtime\\library.js:121:7005)\n    at Bn.handleAndLogRequestError (E:\\Full-Stack Developer\\E-Commerce Project 1.1\\backend\\node_modules\\@prisma\\client\\runtime\\library.js:121:6686)\n    at Bn.request (E:\\Full-Stack Developer\\E-Commerce Project 1.1\\backend\\node_modules\\@prisma\\client\\runtime\\library.js:121:6393)\n    at async l (E:\\Full-Stack Developer\\E-Commerce Project 1.1\\backend\\node_modules\\@prisma\\client\\runtime\\library.js:130:9645)\n    at async exports.getAllReviews (E:\\Full-Stack Developer\\E-Commerce Project 1.1\\backend\\src\\controllers\\reviewController.js:108:21)","timestamp":"2025-03-08T09:14:34.756Z"}
{"level":"error","message":"Error: PrismaClientValidationError: \nInvalid `prisma.review.findMany()` invocation in\nE:\\Full-Stack Developer\\E-Commerce Project 1.1\\backend\\src\\controllers\\reviewController.js:108:41\n\n  105 // Mendapatkan semua review (tanpa pagination)\n  106 exports.getAllReviews = async (req, res, next) => {\n  107   try {\n→ 108     const reviews = await prisma.review.findMany({\n            include: {\n              user: {\n                select: {\n                  id: true,\n                  name: true,\n                  profilePicture: true\n                }\n              },\n              likes: true,\n              ~~~~~\n              replies: true,\n          ?   product?: true\n            }\n          })\n\nUnknown field `likes` for include statement on model `Review`. Available options are marked with ?.\n    at xn (E:\\Full-Stack Developer\\E-Commerce Project 1.1\\backend\\node_modules\\@prisma\\client\\runtime\\library.js:29:1363)\n    at Bn.handleRequestError (E:\\Full-Stack Developer\\E-Commerce Project 1.1\\backend\\node_modules\\@prisma\\client\\runtime\\library.js:121:7005)\n    at Bn.handleAndLogRequestError (E:\\Full-Stack Developer\\E-Commerce Project 1.1\\backend\\node_modules\\@prisma\\client\\runtime\\library.js:121:6686)\n    at Bn.request (E:\\Full-Stack Developer\\E-Commerce Project 1.1\\backend\\node_modules\\@prisma\\client\\runtime\\library.js:121:6393)\n    at async l (E:\\Full-Stack Developer\\E-Commerce Project 1.1\\backend\\node_modules\\@prisma\\client\\runtime\\library.js:130:9645)\n    at async exports.getAllReviews (E:\\Full-Stack Developer\\E-Commerce Project 1.1\\backend\\src\\controllers\\reviewController.js:108:21)","timestamp":"2025-03-08T09:14:34.974Z"}
{"level":"error","message":"Error: PrismaClientValidationError: \nInvalid `prisma.review.findMany()` invocation in\nE:\\Full-Stack Developer\\E-Commerce Project 1.1\\backend\\src\\controllers\\reviewController.js:108:41\n\n  105 // Mendapatkan semua review (tanpa pagination)\n  106 exports.getAllReviews = async (req, res, next) => {\n  107   try {\n→ 108     const reviews = await prisma.review.findMany({\n            include: {\n              user: {\n                select: {\n                  id: true,\n                  name: true,\n                  profilePicture: true\n                }\n              },\n              likes: true,\n              ~~~~~\n              replies: true,\n          ?   product?: true\n            }\n          })\n\nUnknown field `likes` for include statement on model `Review`. Available options are marked with ?.\n    at xn (E:\\Full-Stack Developer\\E-Commerce Project 1.1\\backend\\node_modules\\@prisma\\client\\runtime\\library.js:29:1363)\n    at Bn.handleRequestError (E:\\Full-Stack Developer\\E-Commerce Project 1.1\\backend\\node_modules\\@prisma\\client\\runtime\\library.js:121:7005)\n    at Bn.handleAndLogRequestError (E:\\Full-Stack Developer\\E-Commerce Project 1.1\\backend\\node_modules\\@prisma\\client\\runtime\\library.js:121:6686)\n    at Bn.request (E:\\Full-Stack Developer\\E-Commerce Project 1.1\\backend\\node_modules\\@prisma\\client\\runtime\\library.js:121:6393)\n    at async l (E:\\Full-Stack Developer\\E-Commerce Project 1.1\\backend\\node_modules\\@prisma\\client\\runtime\\library.js:130:9645)\n    at async exports.getAllReviews (E:\\Full-Stack Developer\\E-Commerce Project 1.1\\backend\\src\\controllers\\reviewController.js:108:21)","timestamp":"2025-03-08T09:14:37.667Z"}
{"level":"error","message":"Error: PrismaClientValidationError: \nInvalid `prisma.review.findMany()` invocation in\nE:\\Full-Stack Developer\\E-Commerce Project 1.1\\backend\\src\\controllers\\reviewController.js:108:41\n\n  105 // Mendapatkan semua review (tanpa pagination)\n  106 exports.getAllReviews = async (req, res, next) => {\n  107   try {\n→ 108     const reviews = await prisma.review.findMany({\n            include: {\n              user: {\n                select: {\n                  id: true,\n                  name: true,\n                  profilePicture: true\n                }\n              },\n              likes: true,\n              ~~~~~\n              replies: true,\n          ?   product?: true\n            }\n          })\n\nUnknown field `likes` for include statement on model `Review`. Available options are marked with ?.\n    at xn (E:\\Full-Stack Developer\\E-Commerce Project 1.1\\backend\\node_modules\\@prisma\\client\\runtime\\library.js:29:1363)\n    at Bn.handleRequestError (E:\\Full-Stack Developer\\E-Commerce Project 1.1\\backend\\node_modules\\@prisma\\client\\runtime\\library.js:121:7005)\n    at Bn.handleAndLogRequestError (E:\\Full-Stack Developer\\E-Commerce Project 1.1\\backend\\node_modules\\@prisma\\client\\runtime\\library.js:121:6686)\n    at Bn.request (E:\\Full-Stack Developer\\E-Commerce Project 1.1\\backend\\node_modules\\@prisma\\client\\runtime\\library.js:121:6393)\n    at async l (E:\\Full-Stack Developer\\E-Commerce Project 1.1\\backend\\node_modules\\@prisma\\client\\runtime\\library.js:130:9645)\n    at async exports.getAllReviews (E:\\Full-Stack Developer\\E-Commerce Project 1.1\\backend\\src\\controllers\\reviewController.js:108:21)","timestamp":"2025-03-08T09:14:38.054Z"}
{"level":"error","message":"Error: PrismaClientValidationError: \nInvalid `prisma.review.findMany()` invocation in\nE:\\Full-Stack Developer\\E-Commerce Project 1.1\\backend\\src\\controllers\\reviewController.js:108:41\n\n  105 // Mendapatkan semua review (tanpa pagination)\n  106 exports.getAllReviews = async (req, res, next) => {\n  107   try {\n→ 108     const reviews = await prisma.review.findMany({\n            include: {\n              user: {\n                select: {\n                  id: true,\n                  name: true,\n                  profilePicture: true\n                }\n              },\n              likes: true,\n              ~~~~~\n              replies: true,\n          ?   product?: true\n            }\n          })\n\nUnknown field `likes` for include statement on model `Review`. Available options are marked with ?.\n    at xn (E:\\Full-Stack Developer\\E-Commerce Project 1.1\\backend\\node_modules\\@prisma\\client\\runtime\\library.js:29:1363)\n    at Bn.handleRequestError (E:\\Full-Stack Developer\\E-Commerce Project 1.1\\backend\\node_modules\\@prisma\\client\\runtime\\library.js:121:7005)\n    at Bn.handleAndLogRequestError (E:\\Full-Stack Developer\\E-Commerce Project 1.1\\backend\\node_modules\\@prisma\\client\\runtime\\library.js:121:6686)\n    at Bn.request (E:\\Full-Stack Developer\\E-Commerce Project 1.1\\backend\\node_modules\\@prisma\\client\\runtime\\library.js:121:6393)\n    at async l (E:\\Full-Stack Developer\\E-Commerce Project 1.1\\backend\\node_modules\\@prisma\\client\\runtime\\library.js:130:9645)\n    at async exports.getAllReviews (E:\\Full-Stack Developer\\E-Commerce Project 1.1\\backend\\src\\controllers\\reviewController.js:108:21)","timestamp":"2025-03-08T09:14:40.138Z"}
{"level":"error","message":"Error: PrismaClientValidationError: \nInvalid `prisma.review.findMany()` invocation in\nE:\\Full-Stack Developer\\E-Commerce Project 1.1\\backend\\src\\controllers\\reviewController.js:108:41\n\n  105 // Mendapatkan semua review (tanpa pagination)\n  106 exports.getAllReviews = async (req, res, next) => {\n  107   try {\n→ 108     const reviews = await prisma.review.findMany({\n            include: {\n              user: {\n                select: {\n                  id: true,\n                  name: true,\n                  profilePicture: true\n                }\n              },\n              likes: true,\n              ~~~~~\n              replies: true,\n          ?   product?: true\n            }\n          })\n\nUnknown field `likes` for include statement on model `Review`. Available options are marked with ?.\n    at xn (E:\\Full-Stack Developer\\E-Commerce Project 1.1\\backend\\node_modules\\@prisma\\client\\runtime\\library.js:29:1363)\n    at Bn.handleRequestError (E:\\Full-Stack Developer\\E-Commerce Project 1.1\\backend\\node_modules\\@prisma\\client\\runtime\\library.js:121:7005)\n    at Bn.handleAndLogRequestError (E:\\Full-Stack Developer\\E-Commerce Project 1.1\\backend\\node_modules\\@prisma\\client\\runtime\\library.js:121:6686)\n    at Bn.request (E:\\Full-Stack Developer\\E-Commerce Project 1.1\\backend\\node_modules\\@prisma\\client\\runtime\\library.js:121:6393)\n    at async l (E:\\Full-Stack Developer\\E-Commerce Project 1.1\\backend\\node_modules\\@prisma\\client\\runtime\\library.js:130:9645)\n    at async exports.getAllReviews (E:\\Full-Stack Developer\\E-Commerce Project 1.1\\backend\\src\\controllers\\reviewController.js:108:21)","timestamp":"2025-03-08T09:14:40.936Z"}
{"level":"error","message":"Error: PrismaClientValidationError: \nInvalid `prisma.review.findMany()` invocation in\nE:\\Full-Stack Developer\\E-Commerce Project 1.1\\backend\\src\\controllers\\reviewController.js:108:41\n\n  105 // Mendapatkan semua review (tanpa pagination)\n  106 exports.getAllReviews = async (req, res, next) => {\n  107   try {\n→ 108     const reviews = await prisma.review.findMany({\n            include: {\n              user: {\n                select: {\n                  id: true,\n                  name: true,\n                  profilePicture: true\n                }\n              },\n              likes: true,\n              ~~~~~\n              replies: true,\n          ?   product?: true\n            }\n          })\n\nUnknown field `likes` for include statement on model `Review`. Available options are marked with ?.\n    at xn (E:\\Full-Stack Developer\\E-Commerce Project 1.1\\backend\\node_modules\\@prisma\\client\\runtime\\library.js:29:1363)\n    at Bn.handleRequestError (E:\\Full-Stack Developer\\E-Commerce Project 1.1\\backend\\node_modules\\@prisma\\client\\runtime\\library.js:121:7005)\n    at Bn.handleAndLogRequestError (E:\\Full-Stack Developer\\E-Commerce Project 1.1\\backend\\node_modules\\@prisma\\client\\runtime\\library.js:121:6686)\n    at Bn.request (E:\\Full-Stack Developer\\E-Commerce Project 1.1\\backend\\node_modules\\@prisma\\client\\runtime\\library.js:121:6393)\n    at async l (E:\\Full-Stack Developer\\E-Commerce Project 1.1\\backend\\node_modules\\@prisma\\client\\runtime\\library.js:130:9645)\n    at async exports.getAllReviews (E:\\Full-Stack Developer\\E-Commerce Project 1.1\\backend\\src\\controllers\\reviewController.js:108:21)","timestamp":"2025-03-08T09:16:45.152Z"}
{"level":"error","message":"Error: PrismaClientValidationError: \nInvalid `prisma.review.findMany()` invocation in\nE:\\Full-Stack Developer\\E-Commerce Project 1.1\\backend\\src\\controllers\\reviewController.js:108:41\n\n  105 // Mendapatkan semua review (tanpa pagination)\n  106 exports.getAllReviews = async (req, res, next) => {\n  107   try {\n→ 108     const reviews = await prisma.review.findMany({\n            include: {\n              user: {\n                select: {\n                  id: true,\n                  name: true,\n                  profilePicture: true\n                }\n              },\n              likes: true,\n              ~~~~~\n              replies: true,\n          ?   product?: true\n            }\n          })\n\nUnknown field `likes` for include statement on model `Review`. Available options are marked with ?.\n    at xn (E:\\Full-Stack Developer\\E-Commerce Project 1.1\\backend\\node_modules\\@prisma\\client\\runtime\\library.js:29:1363)\n    at Bn.handleRequestError (E:\\Full-Stack Developer\\E-Commerce Project 1.1\\backend\\node_modules\\@prisma\\client\\runtime\\library.js:121:7005)\n    at Bn.handleAndLogRequestError (E:\\Full-Stack Developer\\E-Commerce Project 1.1\\backend\\node_modules\\@prisma\\client\\runtime\\library.js:121:6686)\n    at Bn.request (E:\\Full-Stack Developer\\E-Commerce Project 1.1\\backend\\node_modules\\@prisma\\client\\runtime\\library.js:121:6393)\n    at async l (E:\\Full-Stack Developer\\E-Commerce Project 1.1\\backend\\node_modules\\@prisma\\client\\runtime\\library.js:130:9645)\n    at async exports.getAllReviews (E:\\Full-Stack Developer\\E-Commerce Project 1.1\\backend\\src\\controllers\\reviewController.js:108:21)","timestamp":"2025-03-08T09:16:45.435Z"}
{"level":"error","message":"Error: PrismaClientValidationError: \nInvalid `prisma.review.findMany()` invocation in\nE:\\Full-Stack Developer\\E-Commerce Project 1.1\\backend\\src\\controllers\\reviewController.js:108:41\n\n  105 // Mendapatkan semua review (tanpa pagination)\n  106 exports.getAllReviews = async (req, res, next) => {\n  107   try {\n→ 108     const reviews = await prisma.review.findMany({\n            include: {\n              user: {\n                select: {\n                  id: true,\n                  name: true,\n                  profilePicture: true\n                }\n              },\n              likes: true,\n              ~~~~~\n              replies: true,\n          ?   product?: true\n            }\n          })\n\nUnknown field `likes` for include statement on model `Review`. Available options are marked with ?.\n    at xn (E:\\Full-Stack Developer\\E-Commerce Project 1.1\\backend\\node_modules\\@prisma\\client\\runtime\\library.js:29:1363)\n    at Bn.handleRequestError (E:\\Full-Stack Developer\\E-Commerce Project 1.1\\backend\\node_modules\\@prisma\\client\\runtime\\library.js:121:7005)\n    at Bn.handleAndLogRequestError (E:\\Full-Stack Developer\\E-Commerce Project 1.1\\backend\\node_modules\\@prisma\\client\\runtime\\library.js:121:6686)\n    at Bn.request (E:\\Full-Stack Developer\\E-Commerce Project 1.1\\backend\\node_modules\\@prisma\\client\\runtime\\library.js:121:6393)\n    at async l (E:\\Full-Stack Developer\\E-Commerce Project 1.1\\backend\\node_modules\\@prisma\\client\\runtime\\library.js:130:9645)\n    at async exports.getAllReviews (E:\\Full-Stack Developer\\E-Commerce Project 1.1\\backend\\src\\controllers\\reviewController.js:108:21)","timestamp":"2025-03-08T09:16:45.683Z"}
{"level":"error","message":"Error: PrismaClientValidationError: \nInvalid `prisma.review.findMany()` invocation in\nE:\\Full-Stack Developer\\E-Commerce Project 1.1\\backend\\src\\controllers\\reviewController.js:108:41\n\n  105 // Mendapatkan semua review (tanpa pagination)\n  106 exports.getAllReviews = async (req, res, next) => {\n  107   try {\n→ 108     const reviews = await prisma.review.findMany({\n            include: {\n              user: {\n                select: {\n                  id: true,\n                  name: true,\n                  profilePicture: true\n                }\n              },\n              likes: true,\n              ~~~~~\n              replies: true,\n          ?   product?: true\n            }\n          })\n\nUnknown field `likes` for include statement on model `Review`. Available options are marked with ?.\n    at xn (E:\\Full-Stack Developer\\E-Commerce Project 1.1\\backend\\node_modules\\@prisma\\client\\runtime\\library.js:29:1363)\n    at Bn.handleRequestError (E:\\Full-Stack Developer\\E-Commerce Project 1.1\\backend\\node_modules\\@prisma\\client\\runtime\\library.js:121:7005)\n    at Bn.handleAndLogRequestError (E:\\Full-Stack Developer\\E-Commerce Project 1.1\\backend\\node_modules\\@prisma\\client\\runtime\\library.js:121:6686)\n    at Bn.request (E:\\Full-Stack Developer\\E-Commerce Project 1.1\\backend\\node_modules\\@prisma\\client\\runtime\\library.js:121:6393)\n    at async l (E:\\Full-Stack Developer\\E-Commerce Project 1.1\\backend\\node_modules\\@prisma\\client\\runtime\\library.js:130:9645)\n    at async exports.getAllReviews (E:\\Full-Stack Developer\\E-Commerce Project 1.1\\backend\\src\\controllers\\reviewController.js:108:21)","timestamp":"2025-03-08T09:16:49.316Z"}
{"level":"error","message":"Error: PrismaClientValidationError: \nInvalid `prisma.review.findMany()` invocation in\nE:\\Full-Stack Developer\\E-Commerce Project 1.1\\backend\\src\\controllers\\reviewController.js:108:41\n\n  105 // Mendapatkan semua review (tanpa pagination)\n  106 exports.getAllReviews = async (req, res, next) => {\n  107   try {\n→ 108     const reviews = await prisma.review.findMany({\n            include: {\n              user: {\n                select: {\n                  id: true,\n                  name: true,\n                  profilePicture: true\n                }\n              },\n              likes: true,\n              ~~~~~\n              replies: true,\n          ?   product?: true\n            }\n          })\n\nUnknown field `likes` for include statement on model `Review`. Available options are marked with ?.\n    at xn (E:\\Full-Stack Developer\\E-Commerce Project 1.1\\backend\\node_modules\\@prisma\\client\\runtime\\library.js:29:1363)\n    at Bn.handleRequestError (E:\\Full-Stack Developer\\E-Commerce Project 1.1\\backend\\node_modules\\@prisma\\client\\runtime\\library.js:121:7005)\n    at Bn.handleAndLogRequestError (E:\\Full-Stack Developer\\E-Commerce Project 1.1\\backend\\node_modules\\@prisma\\client\\runtime\\library.js:121:6686)\n    at Bn.request (E:\\Full-Stack Developer\\E-Commerce Project 1.1\\backend\\node_modules\\@prisma\\client\\runtime\\library.js:121:6393)\n    at async l (E:\\Full-Stack Developer\\E-Commerce Project 1.1\\backend\\node_modules\\@prisma\\client\\runtime\\library.js:130:9645)\n    at async exports.getAllReviews (E:\\Full-Stack Developer\\E-Commerce Project 1.1\\backend\\src\\controllers\\reviewController.js:108:21)","timestamp":"2025-03-08T09:16:49.627Z"}
{"level":"error","message":"Error: PrismaClientValidationError: \nInvalid `prisma.review.findMany()` invocation in\nE:\\Full-Stack Developer\\E-Commerce Project 1.1\\backend\\src\\controllers\\reviewController.js:108:41\n\n  105 // Mendapatkan semua review (tanpa pagination)\n  106 exports.getAllReviews = async (req, res, next) => {\n  107   try {\n→ 108     const reviews = await prisma.review.findMany({\n            include: {\n              user: {\n                select: {\n                  id: true,\n                  name: true,\n                  profilePicture: true\n                }\n              },\n              likes: true,\n              ~~~~~\n              replies: true,\n          ?   product?: true\n            }\n          })\n\nUnknown field `likes` for include statement on model `Review`. Available options are marked with ?.\n    at xn (E:\\Full-Stack Developer\\E-Commerce Project 1.1\\backend\\node_modules\\@prisma\\client\\runtime\\library.js:29:1363)\n    at Bn.handleRequestError (E:\\Full-Stack Developer\\E-Commerce Project 1.1\\backend\\node_modules\\@prisma\\client\\runtime\\library.js:121:7005)\n    at Bn.handleAndLogRequestError (E:\\Full-Stack Developer\\E-Commerce Project 1.1\\backend\\node_modules\\@prisma\\client\\runtime\\library.js:121:6686)\n    at Bn.request (E:\\Full-Stack Developer\\E-Commerce Project 1.1\\backend\\node_modules\\@prisma\\client\\runtime\\library.js:121:6393)\n    at async l (E:\\Full-Stack Developer\\E-Commerce Project 1.1\\backend\\node_modules\\@prisma\\client\\runtime\\library.js:130:9645)\n    at async exports.getAllReviews (E:\\Full-Stack Developer\\E-Commerce Project 1.1\\backend\\src\\controllers\\reviewController.js:108:21)","timestamp":"2025-03-08T09:16:53.102Z"}
{"level":"error","message":"Error: PrismaClientValidationError: \nInvalid `prisma.review.findMany()` invocation in\nE:\\Full-Stack Developer\\E-Commerce Project 1.1\\backend\\src\\controllers\\reviewController.js:108:41\n\n  105 // Mendapatkan semua review (tanpa pagination)\n  106 exports.getAllReviews = async (req, res, next) => {\n  107   try {\n→ 108     const reviews = await prisma.review.findMany({\n            include: {\n              user: {\n                select: {\n                  id: true,\n                  name: true,\n                  profilePicture: true\n                }\n              },\n              likes: true,\n              ~~~~~\n              replies: true,\n          ?   product?: true\n            }\n          })\n\nUnknown field `likes` for include statement on model `Review`. Available options are marked with ?.\n    at xn (E:\\Full-Stack Developer\\E-Commerce Project 1.1\\backend\\node_modules\\@prisma\\client\\runtime\\library.js:29:1363)\n    at Bn.handleRequestError (E:\\Full-Stack Developer\\E-Commerce Project 1.1\\backend\\node_modules\\@prisma\\client\\runtime\\library.js:121:7005)\n    at Bn.handleAndLogRequestError (E:\\Full-Stack Developer\\E-Commerce Project 1.1\\backend\\node_modules\\@prisma\\client\\runtime\\library.js:121:6686)\n    at Bn.request (E:\\Full-Stack Developer\\E-Commerce Project 1.1\\backend\\node_modules\\@prisma\\client\\runtime\\library.js:121:6393)\n    at async l (E:\\Full-Stack Developer\\E-Commerce Project 1.1\\backend\\node_modules\\@prisma\\client\\runtime\\library.js:130:9645)\n    at async exports.getAllReviews (E:\\Full-Stack Developer\\E-Commerce Project 1.1\\backend\\src\\controllers\\reviewController.js:108:21)","timestamp":"2025-03-08T09:16:53.263Z"}
{"level":"error","message":"Error: PrismaClientValidationError: \nInvalid `prisma.review.findMany()` invocation in\nE:\\Full-Stack Developer\\E-Commerce Project 1.1\\backend\\src\\controllers\\reviewController.js:108:41\n\n  105 // Mendapatkan semua review (tanpa pagination)\n  106 exports.getAllReviews = async (req, res, next) => {\n  107   try {\n→ 108     const reviews = await prisma.review.findMany({\n            include: {\n              user: {\n                select: {\n                  id: true,\n                  name: true,\n                  profilePicture: true\n                }\n              },\n              likes: true,\n              ~~~~~\n              replies: true,\n          ?   product?: true\n            }\n          })\n\nUnknown field `likes` for include statement on model `Review`. Available options are marked with ?.\n    at xn (E:\\Full-Stack Developer\\E-Commerce Project 1.1\\backend\\node_modules\\@prisma\\client\\runtime\\library.js:29:1363)\n    at Bn.handleRequestError (E:\\Full-Stack Developer\\E-Commerce Project 1.1\\backend\\node_modules\\@prisma\\client\\runtime\\library.js:121:7005)\n    at Bn.handleAndLogRequestError (E:\\Full-Stack Developer\\E-Commerce Project 1.1\\backend\\node_modules\\@prisma\\client\\runtime\\library.js:121:6686)\n    at Bn.request (E:\\Full-Stack Developer\\E-Commerce Project 1.1\\backend\\node_modules\\@prisma\\client\\runtime\\library.js:121:6393)\n    at async l (E:\\Full-Stack Developer\\E-Commerce Project 1.1\\backend\\node_modules\\@prisma\\client\\runtime\\library.js:130:9645)\n    at async exports.getAllReviews (E:\\Full-Stack Developer\\E-Commerce Project 1.1\\backend\\src\\controllers\\reviewController.js:108:21)","timestamp":"2025-03-08T09:16:56.734Z"}
{"level":"error","message":"Error: PrismaClientValidationError: \nInvalid `prisma.review.findMany()` invocation in\nE:\\Full-Stack Developer\\E-Commerce Project 1.1\\backend\\src\\controllers\\reviewController.js:108:41\n\n  105 // Mendapatkan semua review (tanpa pagination)\n  106 exports.getAllReviews = async (req, res, next) => {\n  107   try {\n→ 108     const reviews = await prisma.review.findMany({\n            include: {\n              user: {\n                select: {\n                  id: true,\n                  name: true,\n                  profilePicture: true\n                }\n              },\n              likes: true,\n              ~~~~~\n              replies: true,\n          ?   product?: true\n            }\n          })\n\nUnknown field `likes` for include statement on model `Review`. Available options are marked with ?.\n    at xn (E:\\Full-Stack Developer\\E-Commerce Project 1.1\\backend\\node_modules\\@prisma\\client\\runtime\\library.js:29:1363)\n    at Bn.handleRequestError (E:\\Full-Stack Developer\\E-Commerce Project 1.1\\backend\\node_modules\\@prisma\\client\\runtime\\library.js:121:7005)\n    at Bn.handleAndLogRequestError (E:\\Full-Stack Developer\\E-Commerce Project 1.1\\backend\\node_modules\\@prisma\\client\\runtime\\library.js:121:6686)\n    at Bn.request (E:\\Full-Stack Developer\\E-Commerce Project 1.1\\backend\\node_modules\\@prisma\\client\\runtime\\library.js:121:6393)\n    at async l (E:\\Full-Stack Developer\\E-Commerce Project 1.1\\backend\\node_modules\\@prisma\\client\\runtime\\library.js:130:9645)\n    at async exports.getAllReviews (E:\\Full-Stack Developer\\E-Commerce Project 1.1\\backend\\src\\controllers\\reviewController.js:108:21)","timestamp":"2025-03-08T09:16:56.916Z"}
{"level":"error","message":"Error: PrismaClientValidationError: \nInvalid `prisma.product.update()` invocation in\nE:\\Full-Stack Developer\\E-Commerce Project 1.1\\backend\\src\\controllers\\reviewController.js:213:26\n\n  210 const totalRating = reviews.reduce((sum, review) => sum + review.rating, 0);\n  211 const averageRating = reviews.length > 0 ? totalRating / reviews.length : 0;\n  212 \n→ 213 await prisma.product.update({\n        where: {\n          id: 26\n        },\n        data: {\n          averageRating: 4,\n          ~~~~~~~~~~~~~\n      ?   title?: String | StringFieldUpdateOperationsInput,\n      ?   description?: String | StringFieldUpdateOperationsInput,\n      ?   price?: Float | FloatFieldUpdateOperationsInput,\n      ?   image?: String | NullableStringFieldUpdateOperationsInput | Null,\n      ?   stock?: Int | NullableIntFieldUpdateOperationsInput | Null,\n      ?   createdAt?: DateTime | DateTimeFieldUpdateOperationsInput,\n      ?   updatedAt?: DateTime | DateTimeFieldUpdateOperationsInput,\n      ?   category?: CategoryUpdateOneRequiredWithoutProductsNestedInput,\n      ?   reviews?: ReviewUpdateManyWithoutProductNestedInput,\n      ?   wishlists?: WishlistUpdateManyWithoutProductNestedInput\n        }\n      })\n\nUnknown argument `averageRating`. Available options are marked with ?.\n    at xn (E:\\Full-Stack Developer\\E-Commerce Project 1.1\\backend\\node_modules\\@prisma\\client\\runtime\\library.js:29:1363)\n    at Bn.handleRequestError (E:\\Full-Stack Developer\\E-Commerce Project 1.1\\backend\\node_modules\\@prisma\\client\\runtime\\library.js:121:7005)\n    at Bn.handleAndLogRequestError (E:\\Full-Stack Developer\\E-Commerce Project 1.1\\backend\\node_modules\\@prisma\\client\\runtime\\library.js:121:6686)\n    at Bn.request (E:\\Full-Stack Developer\\E-Commerce Project 1.1\\backend\\node_modules\\@prisma\\client\\runtime\\library.js:121:6393)\n    at async l (E:\\Full-Stack Developer\\E-Commerce Project 1.1\\backend\\node_modules\\@prisma\\client\\runtime\\library.js:130:9645)\n    at async updateProductAverageRating (E:\\Full-Stack Developer\\E-Commerce Project 1.1\\backend\\src\\controllers\\reviewController.js:213:5)\n    at async exports.createReview (E:\\Full-Stack Developer\\E-Commerce Project 1.1\\backend\\src\\controllers\\reviewController.js:42:5)","timestamp":"2025-03-08T10:29:51.400Z"}
{"level":"error","message":"Error: PrismaClientValidationError: \nInvalid `prisma.product.update()` invocation in\nE:\\Full-Stack Developer\\E-Commerce Project 1.1\\backend\\src\\controllers\\reviewController.js:213:26\n\n  210 const totalRating = reviews.reduce((sum, review) => sum + review.rating, 0);\n  211 const averageRating = reviews.length > 0 ? totalRating / reviews.length : 0;\n  212 \n→ 213 await prisma.product.update({\n        where: {\n          id: 26\n        },\n        data: {\n          averageRating: 4,\n          ~~~~~~~~~~~~~\n      ?   title?: String | StringFieldUpdateOperationsInput,\n      ?   description?: String | StringFieldUpdateOperationsInput,\n      ?   price?: Float | FloatFieldUpdateOperationsInput,\n      ?   image?: String | NullableStringFieldUpdateOperationsInput | Null,\n      ?   stock?: Int | NullableIntFieldUpdateOperationsInput | Null,\n      ?   createdAt?: DateTime | DateTimeFieldUpdateOperationsInput,\n      ?   updatedAt?: DateTime | DateTimeFieldUpdateOperationsInput,\n      ?   category?: CategoryUpdateOneRequiredWithoutProductsNestedInput,\n      ?   reviews?: ReviewUpdateManyWithoutProductNestedInput,\n      ?   wishlists?: WishlistUpdateManyWithoutProductNestedInput\n        }\n      })\n\nUnknown argument `averageRating`. Available options are marked with ?.\n    at xn (E:\\Full-Stack Developer\\E-Commerce Project 1.1\\backend\\node_modules\\@prisma\\client\\runtime\\library.js:29:1363)\n    at Bn.handleRequestError (E:\\Full-Stack Developer\\E-Commerce Project 1.1\\backend\\node_modules\\@prisma\\client\\runtime\\library.js:121:7005)\n    at Bn.handleAndLogRequestError (E:\\Full-Stack Developer\\E-Commerce Project 1.1\\backend\\node_modules\\@prisma\\client\\runtime\\library.js:121:6686)\n    at Bn.request (E:\\Full-Stack Developer\\E-Commerce Project 1.1\\backend\\node_modules\\@prisma\\client\\runtime\\library.js:121:6393)\n    at async l (E:\\Full-Stack Developer\\E-Commerce Project 1.1\\backend\\node_modules\\@prisma\\client\\runtime\\library.js:130:9645)\n    at async updateProductAverageRating (E:\\Full-Stack Developer\\E-Commerce Project 1.1\\backend\\src\\controllers\\reviewController.js:213:5)\n    at async exports.createReview (E:\\Full-Stack Developer\\E-Commerce Project 1.1\\backend\\src\\controllers\\reviewController.js:42:5)","timestamp":"2025-03-08T10:34:12.792Z"}
{"level":"error","message":"Error: PrismaClientValidationError: \nInvalid `prisma.product.update()` invocation in\nE:\\Full-Stack Developer\\E-Commerce Project 1.1\\backend\\src\\controllers\\reviewController.js:181:24\n\n  178 const totalRating = reviews.reduce((sum, review) => sum + review.rating, 0);\n  179 const averageRating = reviews.length > 0 ? totalRating / reviews.length : 0;\n  180 \n→ 181 await prisma.product.update({\n        where: {\n          id: 25\n        },\n        data: {\n          averageRating: 4,\n          ~~~~~~~~~~~~~\n      ?   title?: String | StringFieldUpdateOperationsInput,\n      ?   description?: String | StringFieldUpdateOperationsInput,\n      ?   price?: Float | FloatFieldUpdateOperationsInput,\n      ?   image?: String | NullableStringFieldUpdateOperationsInput | Null,\n      ?   stock?: Int | NullableIntFieldUpdateOperationsInput | Null,\n      ?   createdAt?: DateTime | DateTimeFieldUpdateOperationsInput,\n      ?   updatedAt?: DateTime | DateTimeFieldUpdateOperationsInput,\n      ?   category?: CategoryUpdateOneRequiredWithoutProductsNestedInput,\n      ?   reviews?: ReviewUpdateManyWithoutProductNestedInput,\n      ?   wishlists?: WishlistUpdateManyWithoutProductNestedInput\n        }\n      })\n\nUnknown argument `averageRating`. Available options are marked with ?.\n    at xn (E:\\Full-Stack Developer\\E-Commerce Project 1.1\\backend\\node_modules\\@prisma\\client\\runtime\\library.js:29:1363)\n    at Bn.handleRequestError (E:\\Full-Stack Developer\\E-Commerce Project 1.1\\backend\\node_modules\\@prisma\\client\\runtime\\library.js:121:7005)\n    at Bn.handleAndLogRequestError (E:\\Full-Stack Developer\\E-Commerce Project 1.1\\backend\\node_modules\\@prisma\\client\\runtime\\library.js:121:6686)\n    at Bn.request (E:\\Full-Stack Developer\\E-Commerce Project 1.1\\backend\\node_modules\\@prisma\\client\\runtime\\library.js:121:6393)\n    at async l (E:\\Full-Stack Developer\\E-Commerce Project 1.1\\backend\\node_modules\\@prisma\\client\\runtime\\library.js:130:9645)\n    at async updateProductAverageRating (E:\\Full-Stack Developer\\E-Commerce Project 1.1\\backend\\src\\controllers\\reviewController.js:181:3)\n    at async exports.createReview (E:\\Full-Stack Developer\\E-Commerce Project 1.1\\backend\\src\\controllers\\reviewController.js:43:5)","timestamp":"2025-03-08T13:08:35.033Z"}
{"level":"error","message":"Error: PrismaClientValidationError: \n\u001b[31mInvalid \u001b[1m`prisma.user.findUnique()`\u001b[22m invocation in\u001b[39m\n\u001b[4mE:\\Full-Stack Developer\\E-Commerce Project 1.1\\backend\\src\\controllers\\userController.js:9:36\u001b[24m\n\n  \u001b[2m\u001b[90m6\u001b[39m exports\u001b[34m.\u001b[39mgetUserProfile = \u001b[36masync\u001b[39m \u001b[34m(\u001b[39mreq,[object Object], res,[object Object], next\u001b[34m)\u001b[39m => \u001b[34m{\u001b[39m\u001b[22m\n  \u001b[2m\u001b[90m7\u001b[39m   \u001b[36mtry\u001b[39m \u001b[34m{\u001b[39m\u001b[22m\n  \u001b[2m\u001b[90m8\u001b[39m     \u001b[36mconst\u001b[39m userId = req\u001b[34m.\u001b[39muser\u001b[34m.\u001b[39mid\u001b[34m;\u001b[39m\u001b[22m\n\u001b[1m\u001b[31m→\u001b[39m\u001b[22m \u001b[2m\u001b[90m9\u001b[39m     \u001b[36mconst\u001b[39m user = \u001b[36mawait\u001b[39m prisma\u001b[34m.\u001b[39muser\u001b[34m.\u001b[39m\u001b[36mfindUnique\u001b[39m\u001b[34m(\u001b[39m\u001b[22m{\n          where: {\n            id: undefined,\n        \u001b[32m?\u001b[39m   \u001b[32memail\u001b[39m\u001b[32m?\u001b[39m\u001b[32m: \u001b[39m\u001b[32mString\u001b[39m,\n        \u001b[32m?\u001b[39m   \u001b[32mAND\u001b[39m\u001b[32m?\u001b[39m\u001b[32m: \u001b[39m\u001b[32mUserWhereInput | UserWhereInput[]\u001b[39m,\n        \u001b[32m?\u001b[39m   \u001b[32mOR\u001b[39m\u001b[32m?\u001b[39m\u001b[32m: \u001b[39m\u001b[32mUserWhereInput[]\u001b[39m,\n        \u001b[32m?\u001b[39m   \u001b[32mNOT\u001b[39m\u001b[32m?\u001b[39m\u001b[32m: \u001b[39m\u001b[32mUserWhereInput | UserWhereInput[]\u001b[39m,\n        \u001b[32m?\u001b[39m   \u001b[32mname\u001b[39m\u001b[32m?\u001b[39m\u001b[32m: \u001b[39m\u001b[32mStringFilter | String\u001b[39m,\n        \u001b[32m?\u001b[39m   \u001b[32mpassword\u001b[39m\u001b[32m?\u001b[39m\u001b[32m: \u001b[39m\u001b[32mStringFilter | String\u001b[39m,\n        \u001b[32m?\u001b[39m   \u001b[32mrole\u001b[39m\u001b[32m?\u001b[39m\u001b[32m: \u001b[39m\u001b[32mStringFilter | String\u001b[39m,\n        \u001b[32m?\u001b[39m   \u001b[32mprofilePicture\u001b[39m\u001b[32m?\u001b[39m\u001b[32m: \u001b[39m\u001b[32mStringNullableFilter | String | Null\u001b[39m,\n        \u001b[32m?\u001b[39m   \u001b[32maddress\u001b[39m\u001b[32m?\u001b[39m\u001b[32m: \u001b[39m\u001b[32mStringNullableFilter | String | Null\u001b[39m,\n        \u001b[32m?\u001b[39m   \u001b[32mrefreshToken\u001b[39m\u001b[32m?\u001b[39m\u001b[32m: \u001b[39m\u001b[32mStringNullableFilter | String | Null\u001b[39m,\n        \u001b[32m?\u001b[39m   \u001b[32mcreatedAt\u001b[39m\u001b[32m?\u001b[39m\u001b[32m: \u001b[39m\u001b[32mDateTimeFilter | DateTime\u001b[39m,\n        \u001b[32m?\u001b[39m   \u001b[32mreviews\u001b[39m\u001b[32m?\u001b[39m\u001b[32m: \u001b[39m\u001b[32mReviewListRelationFilter\u001b[39m,\n        \u001b[32m?\u001b[39m   \u001b[32mwishlist\u001b[39m\u001b[32m?\u001b[39m\u001b[32m: \u001b[39m\u001b[32mWishlistListRelationFilter\u001b[39m\n          },\n          select: {\n            id: true,\n            name: true,\n            email: true,\n            profilePicture: true,\n            address: true,\n            createdAt: true\n          }\n        }\u001b[2m)\u001b[22m\n\nArgument `\u001b[1mwhere\u001b[22m` of type \u001b[1mUserWhereUniqueInput\u001b[22m needs \u001b[32mat least one of\u001b[39m `\u001b[1mid\u001b[22m` or `\u001b[1memail\u001b[22m` arguments. Available options are listed in \u001b[32mgreen\u001b[39m.\n    at xn (E:\\Full-Stack Developer\\E-Commerce Project 1.1\\backend\\node_modules\\@prisma\\client\\runtime\\library.js:29:1363)\n    at Bn.handleRequestError (E:\\Full-Stack Developer\\E-Commerce Project 1.1\\backend\\node_modules\\@prisma\\client\\runtime\\library.js:121:7005)\n    at Bn.handleAndLogRequestError (E:\\Full-Stack Developer\\E-Commerce Project 1.1\\backend\\node_modules\\@prisma\\client\\runtime\\library.js:121:6686)\n    at Bn.request (E:\\Full-Stack Developer\\E-Commerce Project 1.1\\backend\\node_modules\\@prisma\\client\\runtime\\library.js:121:6393)\n    at async l (E:\\Full-Stack Developer\\E-Commerce Project 1.1\\backend\\node_modules\\@prisma\\client\\runtime\\library.js:130:9645)\n    at async exports.getUserProfile (E:\\Full-Stack Developer\\E-Commerce Project 1.1\\backend\\src\\controllers\\userController.js:9:18)","timestamp":"2025-03-09T01:39:37.820Z"}
{"level":"error","message":"Error: Error: jwt malformed\n    at authMiddleware (E:\\Full-Stack Developer\\E-Commerce Project 1.1\\backend\\src\\middlewares\\authMiddleware.js:26:10)\n    at Layer.handle [as handle_request] (E:\\Full-Stack Developer\\E-Commerce Project 1.1\\backend\\node_modules\\express\\lib\\router\\layer.js:95:5)\n    at trim_prefix (E:\\Full-Stack Developer\\E-Commerce Project 1.1\\backend\\node_modules\\express\\lib\\router\\index.js:328:13)\n    at E:\\Full-Stack Developer\\E-Commerce Project 1.1\\backend\\node_modules\\express\\lib\\router\\index.js:286:9\n    at Function.process_params (E:\\Full-Stack Developer\\E-Commerce Project 1.1\\backend\\node_modules\\express\\lib\\router\\index.js:346:12)\n    at next (E:\\Full-Stack Developer\\E-Commerce Project 1.1\\backend\\node_modules\\express\\lib\\router\\index.js:280:10)\n    at Function.handle (E:\\Full-Stack Developer\\E-Commerce Project 1.1\\backend\\node_modules\\express\\lib\\router\\index.js:175:3)\n    at router (E:\\Full-Stack Developer\\E-Commerce Project 1.1\\backend\\node_modules\\express\\lib\\router\\index.js:47:12)\n    at Layer.handle [as handle_request] (E:\\Full-Stack Developer\\E-Commerce Project 1.1\\backend\\node_modules\\express\\lib\\router\\layer.js:95:5)\n    at trim_prefix (E:\\Full-Stack Developer\\E-Commerce Project 1.1\\backend\\node_modules\\express\\lib\\router\\index.js:328:13)","timestamp":"2025-03-09T01:41:47.068Z"}
{"level":"error","message":"Error: Error: jwt malformed\n    at authMiddleware (E:\\Full-Stack Developer\\E-Commerce Project 1.1\\backend\\src\\middlewares\\authMiddleware.js:26:10)\n    at Layer.handle [as handle_request] (E:\\Full-Stack Developer\\E-Commerce Project 1.1\\backend\\node_modules\\express\\lib\\router\\layer.js:95:5)\n    at trim_prefix (E:\\Full-Stack Developer\\E-Commerce Project 1.1\\backend\\node_modules\\express\\lib\\router\\index.js:328:13)\n    at E:\\Full-Stack Developer\\E-Commerce Project 1.1\\backend\\node_modules\\express\\lib\\router\\index.js:286:9\n    at Function.process_params (E:\\Full-Stack Developer\\E-Commerce Project 1.1\\backend\\node_modules\\express\\lib\\router\\index.js:346:12)\n    at next (E:\\Full-Stack Developer\\E-Commerce Project 1.1\\backend\\node_modules\\express\\lib\\router\\index.js:280:10)\n    at Function.handle (E:\\Full-Stack Developer\\E-Commerce Project 1.1\\backend\\node_modules\\express\\lib\\router\\index.js:175:3)\n    at router (E:\\Full-Stack Developer\\E-Commerce Project 1.1\\backend\\node_modules\\express\\lib\\router\\index.js:47:12)\n    at Layer.handle [as handle_request] (E:\\Full-Stack Developer\\E-Commerce Project 1.1\\backend\\node_modules\\express\\lib\\router\\layer.js:95:5)\n    at trim_prefix (E:\\Full-Stack Developer\\E-Commerce Project 1.1\\backend\\node_modules\\express\\lib\\router\\index.js:328:13)","timestamp":"2025-03-09T01:41:47.080Z"}
{"level":"error","message":"Error: Error: jwt malformed\n    at authMiddleware (E:\\Full-Stack Developer\\E-Commerce Project 1.1\\backend\\src\\middlewares\\authMiddleware.js:26:10)\n    at Layer.handle [as handle_request] (E:\\Full-Stack Developer\\E-Commerce Project 1.1\\backend\\node_modules\\express\\lib\\router\\layer.js:95:5)\n    at trim_prefix (E:\\Full-Stack Developer\\E-Commerce Project 1.1\\backend\\node_modules\\express\\lib\\router\\index.js:328:13)\n    at E:\\Full-Stack Developer\\E-Commerce Project 1.1\\backend\\node_modules\\express\\lib\\router\\index.js:286:9\n    at Function.process_params (E:\\Full-Stack Developer\\E-Commerce Project 1.1\\backend\\node_modules\\express\\lib\\router\\index.js:346:12)\n    at next (E:\\Full-Stack Developer\\E-Commerce Project 1.1\\backend\\node_modules\\express\\lib\\router\\index.js:280:10)\n    at Function.handle (E:\\Full-Stack Developer\\E-Commerce Project 1.1\\backend\\node_modules\\express\\lib\\router\\index.js:175:3)\n    at router (E:\\Full-Stack Developer\\E-Commerce Project 1.1\\backend\\node_modules\\express\\lib\\router\\index.js:47:12)\n    at Layer.handle [as handle_request] (E:\\Full-Stack Developer\\E-Commerce Project 1.1\\backend\\node_modules\\express\\lib\\router\\layer.js:95:5)\n    at trim_prefix (E:\\Full-Stack Developer\\E-Commerce Project 1.1\\backend\\node_modules\\express\\lib\\router\\index.js:328:13)","timestamp":"2025-03-09T01:42:14.253Z"}
{"level":"error","message":"Error: PrismaClientValidationError: \n\u001b[31mInvalid \u001b[1m`prisma.user.findUnique()`\u001b[22m invocation in\u001b[39m\n\u001b[4mE:\\Full-Stack Developer\\E-Commerce Project 1.1\\backend\\src\\controllers\\userController.js:9:36\u001b[24m\n\n  \u001b[2m\u001b[90m6\u001b[39m exports\u001b[34m.\u001b[39mgetUserProfile = \u001b[36masync\u001b[39m \u001b[34m(\u001b[39mreq,[object Object], res,[object Object], next\u001b[34m)\u001b[39m => \u001b[34m{\u001b[39m\u001b[22m\n  \u001b[2m\u001b[90m7\u001b[39m   \u001b[36mtry\u001b[39m \u001b[34m{\u001b[39m\u001b[22m\n  \u001b[2m\u001b[90m8\u001b[39m     \u001b[36mconst\u001b[39m userId = req\u001b[34m.\u001b[39muser\u001b[34m.\u001b[39mid\u001b[34m;\u001b[39m\u001b[22m\n\u001b[1m\u001b[31m→\u001b[39m\u001b[22m \u001b[2m\u001b[90m9\u001b[39m     \u001b[36mconst\u001b[39m user = \u001b[36mawait\u001b[39m prisma\u001b[34m.\u001b[39muser\u001b[34m.\u001b[39m\u001b[36mfindUnique\u001b[39m\u001b[34m(\u001b[39m\u001b[22m{\n          where: {\n            id: undefined,\n        \u001b[32m?\u001b[39m   \u001b[32memail\u001b[39m\u001b[32m?\u001b[39m\u001b[32m: \u001b[39m\u001b[32mString\u001b[39m,\n        \u001b[32m?\u001b[39m   \u001b[32mAND\u001b[39m\u001b[32m?\u001b[39m\u001b[32m: \u001b[39m\u001b[32mUserWhereInput | UserWhereInput[]\u001b[39m,\n        \u001b[32m?\u001b[39m   \u001b[32mOR\u001b[39m\u001b[32m?\u001b[39m\u001b[32m: \u001b[39m\u001b[32mUserWhereInput[]\u001b[39m,\n        \u001b[32m?\u001b[39m   \u001b[32mNOT\u001b[39m\u001b[32m?\u001b[39m\u001b[32m: \u001b[39m\u001b[32mUserWhereInput | UserWhereInput[]\u001b[39m,\n        \u001b[32m?\u001b[39m   \u001b[32mname\u001b[39m\u001b[32m?\u001b[39m\u001b[32m: \u001b[39m\u001b[32mStringFilter | String\u001b[39m,\n        \u001b[32m?\u001b[39m   \u001b[32mpassword\u001b[39m\u001b[32m?\u001b[39m\u001b[32m: \u001b[39m\u001b[32mStringFilter | String\u001b[39m,\n        \u001b[32m?\u001b[39m   \u001b[32mrole\u001b[39m\u001b[32m?\u001b[39m\u001b[32m: \u001b[39m\u001b[32mStringFilter | String\u001b[39m,\n        \u001b[32m?\u001b[39m   \u001b[32mprofilePicture\u001b[39m\u001b[32m?\u001b[39m\u001b[32m: \u001b[39m\u001b[32mStringNullableFilter | String | Null\u001b[39m,\n        \u001b[32m?\u001b[39m   \u001b[32maddress\u001b[39m\u001b[32m?\u001b[39m\u001b[32m: \u001b[39m\u001b[32mStringNullableFilter | String | Null\u001b[39m,\n        \u001b[32m?\u001b[39m   \u001b[32mrefreshToken\u001b[39m\u001b[32m?\u001b[39m\u001b[32m: \u001b[39m\u001b[32mStringNullableFilter | String | Null\u001b[39m,\n        \u001b[32m?\u001b[39m   \u001b[32mcreatedAt\u001b[39m\u001b[32m?\u001b[39m\u001b[32m: \u001b[39m\u001b[32mDateTimeFilter | DateTime\u001b[39m,\n        \u001b[32m?\u001b[39m   \u001b[32mreviews\u001b[39m\u001b[32m?\u001b[39m\u001b[32m: \u001b[39m\u001b[32mReviewListRelationFilter\u001b[39m,\n        \u001b[32m?\u001b[39m   \u001b[32mwishlist\u001b[39m\u001b[32m?\u001b[39m\u001b[32m: \u001b[39m\u001b[32mWishlistListRelationFilter\u001b[39m\n          },\n          select: {\n            id: true,\n            name: true,\n            email: true,\n            profilePicture: true,\n            address: true,\n            createdAt: true\n          }\n        }\u001b[2m)\u001b[22m\n\nArgument `\u001b[1mwhere\u001b[22m` of type \u001b[1mUserWhereUniqueInput\u001b[22m needs \u001b[32mat least one of\u001b[39m `\u001b[1mid\u001b[22m` or `\u001b[1memail\u001b[22m` arguments. Available options are listed in \u001b[32mgreen\u001b[39m.\n    at xn (E:\\Full-Stack Developer\\E-Commerce Project 1.1\\backend\\node_modules\\@prisma\\client\\runtime\\library.js:29:1363)\n    at Bn.handleRequestError (E:\\Full-Stack Developer\\E-Commerce Project 1.1\\backend\\node_modules\\@prisma\\client\\runtime\\library.js:121:7005)\n    at Bn.handleAndLogRequestError (E:\\Full-Stack Developer\\E-Commerce Project 1.1\\backend\\node_modules\\@prisma\\client\\runtime\\library.js:121:6686)\n    at Bn.request (E:\\Full-Stack Developer\\E-Commerce Project 1.1\\backend\\node_modules\\@prisma\\client\\runtime\\library.js:121:6393)\n    at async l (E:\\Full-Stack Developer\\E-Commerce Project 1.1\\backend\\node_modules\\@prisma\\client\\runtime\\library.js:130:9645)\n    at async exports.getUserProfile (E:\\Full-Stack Developer\\E-Commerce Project 1.1\\backend\\src\\controllers\\userController.js:9:18)","timestamp":"2025-03-09T01:42:14.341Z"}
{"level":"error","message":"Refresh token error: Cannot read properties of undefined (reading 'refreshToken')","timestamp":"2025-03-09T02:06:12.014Z"}
{"level":"error","message":"Refresh token error: Cannot read properties of undefined (reading 'refreshToken')","timestamp":"2025-03-09T02:52:39.014Z"}
{"level":"error","message":"Error: PrismaClientValidationError: \nInvalid `prisma.category.findUnique()` invocation in\nE:\\Full-Stack Developer\\E-Commerce Project 1.1\\backend\\src\\controllers\\categoryController.js:41:44\n\n  38 }\n  39 // Gunakan findUnique jika field \"name\" bersifat unik,\n  40 // jika tidak gunakan findFirst untuk mengambil data pertama yang cocok.\n→ 41 const category = await prisma.category.findUnique({\n       where: {\n         name: \"Laptop\",\n     ?   id?: Int,\n     ?   AND?: CategoryWhereInput | CategoryWhereInput[],\n     ?   OR?: CategoryWhereInput[],\n     ?   NOT?: CategoryWhereInput | CategoryWhereInput[],\n     ?   imageUrl?: StringNullableFilter | String | Null,\n     ?   products?: ProductListRelationFilter\n       }\n     })\n\nArgument `where` of type CategoryWhereUniqueInput needs at least one of `id` arguments. Available options are marked with ?.\n    at xn (E:\\Full-Stack Developer\\E-Commerce Project 1.1\\backend\\node_modules\\@prisma\\client\\runtime\\library.js:29:1363)\n    at Bn.handleRequestError (E:\\Full-Stack Developer\\E-Commerce Project 1.1\\backend\\node_modules\\@prisma\\client\\runtime\\library.js:121:7005)\n    at Bn.handleAndLogRequestError (E:\\Full-Stack Developer\\E-Commerce Project 1.1\\backend\\node_modules\\@prisma\\client\\runtime\\library.js:121:6686)\n    at Bn.request (E:\\Full-Stack Developer\\E-Commerce Project 1.1\\backend\\node_modules\\@prisma\\client\\runtime\\library.js:121:6393)\n    at async l (E:\\Full-Stack Developer\\E-Commerce Project 1.1\\backend\\node_modules\\@prisma\\client\\runtime\\library.js:130:9645)\n    at async exports.getCategoryByName (E:\\Full-Stack Developer\\E-Commerce Project 1.1\\backend\\src\\controllers\\categoryController.js:41:22)","timestamp":"2025-03-09T04:03:29.536Z"}
{"level":"error","message":"Error: PrismaClientValidationError: \nInvalid `prisma.category.findUnique()` invocation in\nE:\\Full-Stack Developer\\E-Commerce Project 1.1\\backend\\src\\controllers\\categoryController.js:41:44\n\n  38 }\n  39 // Gunakan findUnique jika field \"name\" bersifat unik,\n  40 // jika tidak gunakan findFirst untuk mengambil data pertama yang cocok.\n→ 41 const category = await prisma.category.findUnique({\n       where: {\n         name: \"Laptop\",\n     ?   id?: Int,\n     ?   AND?: CategoryWhereInput | CategoryWhereInput[],\n     ?   OR?: CategoryWhereInput[],\n     ?   NOT?: CategoryWhereInput | CategoryWhereInput[],\n     ?   imageUrl?: StringNullableFilter | String | Null,\n     ?   products?: ProductListRelationFilter\n       }\n     })\n\nArgument `where` of type CategoryWhereUniqueInput needs at least one of `id` arguments. Available options are marked with ?.\n    at xn (E:\\Full-Stack Developer\\E-Commerce Project 1.1\\backend\\node_modules\\@prisma\\client\\runtime\\library.js:29:1363)\n    at Bn.handleRequestError (E:\\Full-Stack Developer\\E-Commerce Project 1.1\\backend\\node_modules\\@prisma\\client\\runtime\\library.js:121:7005)\n    at Bn.handleAndLogRequestError (E:\\Full-Stack Developer\\E-Commerce Project 1.1\\backend\\node_modules\\@prisma\\client\\runtime\\library.js:121:6686)\n    at Bn.request (E:\\Full-Stack Developer\\E-Commerce Project 1.1\\backend\\node_modules\\@prisma\\client\\runtime\\library.js:121:6393)\n    at async l (E:\\Full-Stack Developer\\E-Commerce Project 1.1\\backend\\node_modules\\@prisma\\client\\runtime\\library.js:130:9645)\n    at async exports.getCategoryByName (E:\\Full-Stack Developer\\E-Commerce Project 1.1\\backend\\src\\controllers\\categoryController.js:41:22)","timestamp":"2025-03-09T04:03:30.197Z"}
{"level":"error","message":"Error: PrismaClientValidationError: \nInvalid `prisma.category.findUnique()` invocation in\nE:\\Full-Stack Developer\\E-Commerce Project 1.1\\backend\\src\\controllers\\categoryController.js:41:44\n\n  38 }\n  39 // Gunakan findUnique jika field \"name\" bersifat unik,\n  40 // jika tidak gunakan findFirst untuk mengambil data pertama yang cocok.\n→ 41 const category = await prisma.category.findUnique({\n       where: {\n         name: \"Laptop\",\n     ?   id?: Int,\n     ?   AND?: CategoryWhereInput | CategoryWhereInput[],\n     ?   OR?: CategoryWhereInput[],\n     ?   NOT?: CategoryWhereInput | CategoryWhereInput[],\n     ?   imageUrl?: StringNullableFilter | String | Null,\n     ?   products?: ProductListRelationFilter\n       }\n     })\n\nArgument `where` of type CategoryWhereUniqueInput needs at least one of `id` arguments. Available options are marked with ?.\n    at xn (E:\\Full-Stack Developer\\E-Commerce Project 1.1\\backend\\node_modules\\@prisma\\client\\runtime\\library.js:29:1363)\n    at Bn.handleRequestError (E:\\Full-Stack Developer\\E-Commerce Project 1.1\\backend\\node_modules\\@prisma\\client\\runtime\\library.js:121:7005)\n    at Bn.handleAndLogRequestError (E:\\Full-Stack Developer\\E-Commerce Project 1.1\\backend\\node_modules\\@prisma\\client\\runtime\\library.js:121:6686)\n    at Bn.request (E:\\Full-Stack Developer\\E-Commerce Project 1.1\\backend\\node_modules\\@prisma\\client\\runtime\\library.js:121:6393)\n    at async l (E:\\Full-Stack Developer\\E-Commerce Project 1.1\\backend\\node_modules\\@prisma\\client\\runtime\\library.js:130:9645)\n    at async exports.getCategoryByName (E:\\Full-Stack Developer\\E-Commerce Project 1.1\\backend\\src\\controllers\\categoryController.js:41:22)","timestamp":"2025-03-09T04:03:30.966Z"}
{"level":"error","message":"Error: PrismaClientValidationError: \nInvalid `prisma.category.findUnique()` invocation in\nE:\\Full-Stack Developer\\E-Commerce Project 1.1\\backend\\src\\controllers\\categoryController.js:41:44\n\n  38 }\n  39 // Gunakan findUnique jika field \"name\" bersifat unik,\n  40 // jika tidak gunakan findFirst untuk mengambil data pertama yang cocok.\n→ 41 const category = await prisma.category.findUnique({\n       where: {\n         name: \"Laptop\",\n     ?   id?: Int,\n     ?   AND?: CategoryWhereInput | CategoryWhereInput[],\n     ?   OR?: CategoryWhereInput[],\n     ?   NOT?: CategoryWhereInput | CategoryWhereInput[],\n     ?   imageUrl?: StringNullableFilter | String | Null,\n     ?   products?: ProductListRelationFilter\n       }\n     })\n\nArgument `where` of type CategoryWhereUniqueInput needs at least one of `id` arguments. Available options are marked with ?.\n    at xn (E:\\Full-Stack Developer\\E-Commerce Project 1.1\\backend\\node_modules\\@prisma\\client\\runtime\\library.js:29:1363)\n    at Bn.handleRequestError (E:\\Full-Stack Developer\\E-Commerce Project 1.1\\backend\\node_modules\\@prisma\\client\\runtime\\library.js:121:7005)\n    at Bn.handleAndLogRequestError (E:\\Full-Stack Developer\\E-Commerce Project 1.1\\backend\\node_modules\\@prisma\\client\\runtime\\library.js:121:6686)\n    at Bn.request (E:\\Full-Stack Developer\\E-Commerce Project 1.1\\backend\\node_modules\\@prisma\\client\\runtime\\library.js:121:6393)\n    at async l (E:\\Full-Stack Developer\\E-Commerce Project 1.1\\backend\\node_modules\\@prisma\\client\\runtime\\library.js:130:9645)\n    at async exports.getCategoryByName (E:\\Full-Stack Developer\\E-Commerce Project 1.1\\backend\\src\\controllers\\categoryController.js:41:22)","timestamp":"2025-03-09T04:03:31.565Z"}
{"level":"error","message":"Error: PrismaClientValidationError: \nInvalid `prisma.category.findUnique()` invocation in\nE:\\Full-Stack Developer\\E-Commerce Project 1.1\\backend\\src\\controllers\\categoryController.js:56:44\n\n  53   return res.status(400).json({ error: \"Category name is required\" });\n  54 }\n  55 // Pastikan field 'name' bersifat unik di database agar bisa menggunakan findUnique\n→ 56 const category = await prisma.category.findUnique({\n       where: {\n         name: \"Laptop\",\n     ?   id?: Int,\n     ?   AND?: CategoryWhereInput | CategoryWhereInput[],\n     ?   OR?: CategoryWhereInput[],\n     ?   NOT?: CategoryWhereInput | CategoryWhereInput[],\n     ?   imageUrl?: StringNullableFilter | String | Null,\n     ?   products?: ProductListRelationFilter\n       }\n     })\n\nArgument `where` of type CategoryWhereUniqueInput needs at least one of `id` arguments. Available options are marked with ?.\n    at xn (E:\\Full-Stack Developer\\E-Commerce Project 1.1\\backend\\node_modules\\@prisma\\client\\runtime\\library.js:29:1363)\n    at Bn.handleRequestError (E:\\Full-Stack Developer\\E-Commerce Project 1.1\\backend\\node_modules\\@prisma\\client\\runtime\\library.js:121:7005)\n    at Bn.handleAndLogRequestError (E:\\Full-Stack Developer\\E-Commerce Project 1.1\\backend\\node_modules\\@prisma\\client\\runtime\\library.js:121:6686)\n    at Bn.request (E:\\Full-Stack Developer\\E-Commerce Project 1.1\\backend\\node_modules\\@prisma\\client\\runtime\\library.js:121:6393)\n    at async l (E:\\Full-Stack Developer\\E-Commerce Project 1.1\\backend\\node_modules\\@prisma\\client\\runtime\\library.js:130:9645)\n    at async exports.getCategoryByName (E:\\Full-Stack Developer\\E-Commerce Project 1.1\\backend\\src\\controllers\\categoryController.js:56:22)","timestamp":"2025-03-09T04:05:36.736Z"}
{"level":"error","message":"Error: PrismaClientValidationError: \nInvalid `prisma.category.findUnique()` invocation in\nE:\\Full-Stack Developer\\E-Commerce Project 1.1\\backend\\src\\controllers\\categoryController.js:56:44\n\n  53   return res.status(400).json({ error: \"Category name is required\" });\n  54 }\n  55 // Pastikan field 'name' bersifat unik di database agar bisa menggunakan findUnique\n→ 56 const category = await prisma.category.findUnique({\n       where: {\n         name: \"Laptop\",\n     ?   id?: Int,\n     ?   AND?: CategoryWhereInput | CategoryWhereInput[],\n     ?   OR?: CategoryWhereInput[],\n     ?   NOT?: CategoryWhereInput | CategoryWhereInput[],\n     ?   imageUrl?: StringNullableFilter | String | Null,\n     ?   products?: ProductListRelationFilter\n       }\n     })\n\nArgument `where` of type CategoryWhereUniqueInput needs at least one of `id` arguments. Available options are marked with ?.\n    at xn (E:\\Full-Stack Developer\\E-Commerce Project 1.1\\backend\\node_modules\\@prisma\\client\\runtime\\library.js:29:1363)\n    at Bn.handleRequestError (E:\\Full-Stack Developer\\E-Commerce Project 1.1\\backend\\node_modules\\@prisma\\client\\runtime\\library.js:121:7005)\n    at Bn.handleAndLogRequestError (E:\\Full-Stack Developer\\E-Commerce Project 1.1\\backend\\node_modules\\@prisma\\client\\runtime\\library.js:121:6686)\n    at Bn.request (E:\\Full-Stack Developer\\E-Commerce Project 1.1\\backend\\node_modules\\@prisma\\client\\runtime\\library.js:121:6393)\n    at async l (E:\\Full-Stack Developer\\E-Commerce Project 1.1\\backend\\node_modules\\@prisma\\client\\runtime\\library.js:130:9645)\n    at async exports.getCategoryByName (E:\\Full-Stack Developer\\E-Commerce Project 1.1\\backend\\src\\controllers\\categoryController.js:56:22)","timestamp":"2025-03-09T04:05:37.506Z"}
{"level":"error","message":"Error: PrismaClientValidationError: \nInvalid `prisma.category.findUnique()` invocation in\nE:\\Full-Stack Developer\\E-Commerce Project 1.1\\backend\\src\\controllers\\categoryController.js:56:44\n\n  53   return res.status(400).json({ error: \"Category name is required\" });\n  54 }\n  55 // Pastikan field 'name' bersifat unik di database agar bisa menggunakan findUnique\n→ 56 const category = await prisma.category.findUnique({\n       where: {\n         name: \"Laptop\",\n     ?   id?: Int,\n     ?   AND?: CategoryWhereInput | CategoryWhereInput[],\n     ?   OR?: CategoryWhereInput[],\n     ?   NOT?: CategoryWhereInput | CategoryWhereInput[],\n     ?   imageUrl?: StringNullableFilter | String | Null,\n     ?   products?: ProductListRelationFilter\n       }\n     })\n\nArgument `where` of type CategoryWhereUniqueInput needs at least one of `id` arguments. Available options are marked with ?.\n    at xn (E:\\Full-Stack Developer\\E-Commerce Project 1.1\\backend\\node_modules\\@prisma\\client\\runtime\\library.js:29:1363)\n    at Bn.handleRequestError (E:\\Full-Stack Developer\\E-Commerce Project 1.1\\backend\\node_modules\\@prisma\\client\\runtime\\library.js:121:7005)\n    at Bn.handleAndLogRequestError (E:\\Full-Stack Developer\\E-Commerce Project 1.1\\backend\\node_modules\\@prisma\\client\\runtime\\library.js:121:6686)\n    at Bn.request (E:\\Full-Stack Developer\\E-Commerce Project 1.1\\backend\\node_modules\\@prisma\\client\\runtime\\library.js:121:6393)\n    at async l (E:\\Full-Stack Developer\\E-Commerce Project 1.1\\backend\\node_modules\\@prisma\\client\\runtime\\library.js:130:9645)\n    at async exports.getCategoryByName (E:\\Full-Stack Developer\\E-Commerce Project 1.1\\backend\\src\\controllers\\categoryController.js:56:22)","timestamp":"2025-03-09T04:05:38.135Z"}
{"level":"error","message":"Error: PrismaClientValidationError: \nInvalid `prisma.category.findUnique()` invocation in\nE:\\Full-Stack Developer\\E-Commerce Project 1.1\\backend\\src\\controllers\\categoryController.js:56:44\n\n  53   return res.status(400).json({ error: \"Category name is required\" });\n  54 }\n  55 // Pastikan field 'name' bersifat unik di database agar bisa menggunakan findUnique\n→ 56 const category = await prisma.category.findUnique({\n       where: {\n         name: \"Laptop\",\n     ?   id?: Int,\n     ?   AND?: CategoryWhereInput | CategoryWhereInput[],\n     ?   OR?: CategoryWhereInput[],\n     ?   NOT?: CategoryWhereInput | CategoryWhereInput[],\n     ?   imageUrl?: StringNullableFilter | String | Null,\n     ?   products?: ProductListRelationFilter\n       }\n     })\n\nArgument `where` of type CategoryWhereUniqueInput needs at least one of `id` arguments. Available options are marked with ?.\n    at xn (E:\\Full-Stack Developer\\E-Commerce Project 1.1\\backend\\node_modules\\@prisma\\client\\runtime\\library.js:29:1363)\n    at Bn.handleRequestError (E:\\Full-Stack Developer\\E-Commerce Project 1.1\\backend\\node_modules\\@prisma\\client\\runtime\\library.js:121:7005)\n    at Bn.handleAndLogRequestError (E:\\Full-Stack Developer\\E-Commerce Project 1.1\\backend\\node_modules\\@prisma\\client\\runtime\\library.js:121:6686)\n    at Bn.request (E:\\Full-Stack Developer\\E-Commerce Project 1.1\\backend\\node_modules\\@prisma\\client\\runtime\\library.js:121:6393)\n    at async l (E:\\Full-Stack Developer\\E-Commerce Project 1.1\\backend\\node_modules\\@prisma\\client\\runtime\\library.js:130:9645)\n    at async exports.getCategoryByName (E:\\Full-Stack Developer\\E-Commerce Project 1.1\\backend\\src\\controllers\\categoryController.js:56:22)","timestamp":"2025-03-09T04:05:38.812Z"}
{"level":"error","message":"Error: PrismaClientValidationError: \nInvalid `prisma.category.findUnique()` invocation in\nE:\\Full-Stack Developer\\E-Commerce Project 1.1\\backend\\src\\controllers\\categoryController.js:61:44\n\n  58   return res.status(400).json({ error: \"Category name is required\" });\n  59 }\n  60 // Pastikan field name unik atau gunakan findFirst jika tidak\n→ 61 const category = await prisma.category.findUnique({\n       where: {\n         name: \"Handphone\",\n     ?   id?: Int,\n     ?   AND?: CategoryWhereInput | CategoryWhereInput[],\n     ?   OR?: CategoryWhereInput[],\n     ?   NOT?: CategoryWhereInput | CategoryWhereInput[],\n     ?   imageUrl?: StringNullableFilter | String | Null,\n     ?   products?: ProductListRelationFilter\n       }\n     })\n\nArgument `where` of type CategoryWhereUniqueInput needs at least one of `id` arguments. Available options are marked with ?.\n    at xn (E:\\Full-Stack Developer\\E-Commerce Project 1.1\\backend\\node_modules\\@prisma\\client\\runtime\\library.js:29:1363)\n    at Bn.handleRequestError (E:\\Full-Stack Developer\\E-Commerce Project 1.1\\backend\\node_modules\\@prisma\\client\\runtime\\library.js:121:7005)\n    at Bn.handleAndLogRequestError (E:\\Full-Stack Developer\\E-Commerce Project 1.1\\backend\\node_modules\\@prisma\\client\\runtime\\library.js:121:6686)\n    at Bn.request (E:\\Full-Stack Developer\\E-Commerce Project 1.1\\backend\\node_modules\\@prisma\\client\\runtime\\library.js:121:6393)\n    at async l (E:\\Full-Stack Developer\\E-Commerce Project 1.1\\backend\\node_modules\\@prisma\\client\\runtime\\library.js:130:9645)\n    at async exports.getCategoryByName (E:\\Full-Stack Developer\\E-Commerce Project 1.1\\backend\\src\\controllers\\categoryController.js:61:22)","timestamp":"2025-03-09T04:09:45.914Z"}
{"level":"error","message":"Error: PrismaClientValidationError: \nInvalid `prisma.category.findUnique()` invocation in\nE:\\Full-Stack Developer\\E-Commerce Project 1.1\\backend\\src\\controllers\\categoryController.js:61:44\n\n  58   return res.status(400).json({ error: \"Category name is required\" });\n  59 }\n  60 // Pastikan field name unik atau gunakan findFirst jika tidak\n→ 61 const category = await prisma.category.findUnique({\n       where: {\n         name: \"Handphone\",\n     ?   id?: Int,\n     ?   AND?: CategoryWhereInput | CategoryWhereInput[],\n     ?   OR?: CategoryWhereInput[],\n     ?   NOT?: CategoryWhereInput | CategoryWhereInput[],\n     ?   imageUrl?: StringNullableFilter | String | Null,\n     ?   products?: ProductListRelationFilter\n       }\n     })\n\nArgument `where` of type CategoryWhereUniqueInput needs at least one of `id` arguments. Available options are marked with ?.\n    at xn (E:\\Full-Stack Developer\\E-Commerce Project 1.1\\backend\\node_modules\\@prisma\\client\\runtime\\library.js:29:1363)\n    at Bn.handleRequestError (E:\\Full-Stack Developer\\E-Commerce Project 1.1\\backend\\node_modules\\@prisma\\client\\runtime\\library.js:121:7005)\n    at Bn.handleAndLogRequestError (E:\\Full-Stack Developer\\E-Commerce Project 1.1\\backend\\node_modules\\@prisma\\client\\runtime\\library.js:121:6686)\n    at Bn.request (E:\\Full-Stack Developer\\E-Commerce Project 1.1\\backend\\node_modules\\@prisma\\client\\runtime\\library.js:121:6393)\n    at async l (E:\\Full-Stack Developer\\E-Commerce Project 1.1\\backend\\node_modules\\@prisma\\client\\runtime\\library.js:130:9645)\n    at async exports.getCategoryByName (E:\\Full-Stack Developer\\E-Commerce Project 1.1\\backend\\src\\controllers\\categoryController.js:61:22)","timestamp":"2025-03-09T04:09:46.625Z"}
{"level":"error","message":"Error: PrismaClientValidationError: \nInvalid `prisma.category.findUnique()` invocation in\nE:\\Full-Stack Developer\\E-Commerce Project 1.1\\backend\\src\\controllers\\categoryController.js:61:44\n\n  58   return res.status(400).json({ error: \"Category name is required\" });\n  59 }\n  60 // Pastikan field name unik atau gunakan findFirst jika tidak\n→ 61 const category = await prisma.category.findUnique({\n       where: {\n         name: \"Handphone\",\n     ?   id?: Int,\n     ?   AND?: CategoryWhereInput | CategoryWhereInput[],\n     ?   OR?: CategoryWhereInput[],\n     ?   NOT?: CategoryWhereInput | CategoryWhereInput[],\n     ?   imageUrl?: StringNullableFilter | String | Null,\n     ?   products?: ProductListRelationFilter\n       }\n     })\n\nArgument `where` of type CategoryWhereUniqueInput needs at least one of `id` arguments. Available options are marked with ?.\n    at xn (E:\\Full-Stack Developer\\E-Commerce Project 1.1\\backend\\node_modules\\@prisma\\client\\runtime\\library.js:29:1363)\n    at Bn.handleRequestError (E:\\Full-Stack Developer\\E-Commerce Project 1.1\\backend\\node_modules\\@prisma\\client\\runtime\\library.js:121:7005)\n    at Bn.handleAndLogRequestError (E:\\Full-Stack Developer\\E-Commerce Project 1.1\\backend\\node_modules\\@prisma\\client\\runtime\\library.js:121:6686)\n    at Bn.request (E:\\Full-Stack Developer\\E-Commerce Project 1.1\\backend\\node_modules\\@prisma\\client\\runtime\\library.js:121:6393)\n    at async l (E:\\Full-Stack Developer\\E-Commerce Project 1.1\\backend\\node_modules\\@prisma\\client\\runtime\\library.js:130:9645)\n    at async exports.getCategoryByName (E:\\Full-Stack Developer\\E-Commerce Project 1.1\\backend\\src\\controllers\\categoryController.js:61:22)","timestamp":"2025-03-09T04:09:47.278Z"}
{"level":"error","message":"Error: PrismaClientValidationError: \nInvalid `prisma.category.findUnique()` invocation in\nE:\\Full-Stack Developer\\E-Commerce Project 1.1\\backend\\src\\controllers\\categoryController.js:61:44\n\n  58   return res.status(400).json({ error: \"Category name is required\" });\n  59 }\n  60 // Pastikan field name unik atau gunakan findFirst jika tidak\n→ 61 const category = await prisma.category.findUnique({\n       where: {\n         name: \"Handphone\",\n     ?   id?: Int,\n     ?   AND?: CategoryWhereInput | CategoryWhereInput[],\n     ?   OR?: CategoryWhereInput[],\n     ?   NOT?: CategoryWhereInput | CategoryWhereInput[],\n     ?   imageUrl?: StringNullableFilter | String | Null,\n     ?   products?: ProductListRelationFilter\n       }\n     })\n\nArgument `where` of type CategoryWhereUniqueInput needs at least one of `id` arguments. Available options are marked with ?.\n    at xn (E:\\Full-Stack Developer\\E-Commerce Project 1.1\\backend\\node_modules\\@prisma\\client\\runtime\\library.js:29:1363)\n    at Bn.handleRequestError (E:\\Full-Stack Developer\\E-Commerce Project 1.1\\backend\\node_modules\\@prisma\\client\\runtime\\library.js:121:7005)\n    at Bn.handleAndLogRequestError (E:\\Full-Stack Developer\\E-Commerce Project 1.1\\backend\\node_modules\\@prisma\\client\\runtime\\library.js:121:6686)\n    at Bn.request (E:\\Full-Stack Developer\\E-Commerce Project 1.1\\backend\\node_modules\\@prisma\\client\\runtime\\library.js:121:6393)\n    at async l (E:\\Full-Stack Developer\\E-Commerce Project 1.1\\backend\\node_modules\\@prisma\\client\\runtime\\library.js:130:9645)\n    at async exports.getCategoryByName (E:\\Full-Stack Developer\\E-Commerce Project 1.1\\backend\\src\\controllers\\categoryController.js:61:22)","timestamp":"2025-03-09T04:09:47.857Z"}
{"level":"error","message":"Error: PrismaClientValidationError: \nInvalid `prisma.category.findUnique()` invocation in\nE:\\Full-Stack Developer\\E-Commerce Project 1.1\\backend\\src\\controllers\\categoryController.js:61:44\n\n  58   return res.status(400).json({ error: \"Category name is required\" });\n  59 }\n  60 // Pastikan field name unik atau gunakan findFirst jika tidak\n→ 61 const category = await prisma.category.findUnique({\n       where: {\n         name: \"handphone\",\n     ?   id?: Int,\n     ?   AND?: CategoryWhereInput | CategoryWhereInput[],\n     ?   OR?: CategoryWhereInput[],\n     ?   NOT?: CategoryWhereInput | CategoryWhereInput[],\n     ?   imageUrl?: StringNullableFilter | String | Null,\n     ?   products?: ProductListRelationFilter\n       }\n     })\n\nArgument `where` of type CategoryWhereUniqueInput needs at least one of `id` arguments. Available options are marked with ?.\n    at xn (E:\\Full-Stack Developer\\E-Commerce Project 1.1\\backend\\node_modules\\@prisma\\client\\runtime\\library.js:29:1363)\n    at Bn.handleRequestError (E:\\Full-Stack Developer\\E-Commerce Project 1.1\\backend\\node_modules\\@prisma\\client\\runtime\\library.js:121:7005)\n    at Bn.handleAndLogRequestError (E:\\Full-Stack Developer\\E-Commerce Project 1.1\\backend\\node_modules\\@prisma\\client\\runtime\\library.js:121:6686)\n    at Bn.request (E:\\Full-Stack Developer\\E-Commerce Project 1.1\\backend\\node_modules\\@prisma\\client\\runtime\\library.js:121:6393)\n    at async l (E:\\Full-Stack Developer\\E-Commerce Project 1.1\\backend\\node_modules\\@prisma\\client\\runtime\\library.js:130:9645)\n    at async exports.getCategoryByName (E:\\Full-Stack Developer\\E-Commerce Project 1.1\\backend\\src\\controllers\\categoryController.js:61:22)","timestamp":"2025-03-09T04:10:00.872Z"}
{"level":"error","message":"Error: PrismaClientValidationError: \nInvalid `prisma.category.findUnique()` invocation in\nE:\\Full-Stack Developer\\E-Commerce Project 1.1\\backend\\src\\controllers\\categoryController.js:61:44\n\n  58   return res.status(400).json({ error: \"Category name is required\" });\n  59 }\n  60 // Pastikan field name unik atau gunakan findFirst jika tidak\n→ 61 const category = await prisma.category.findUnique({\n       where: {\n         name: \"handphone\",\n     ?   id?: Int,\n     ?   AND?: CategoryWhereInput | CategoryWhereInput[],\n     ?   OR?: CategoryWhereInput[],\n     ?   NOT?: CategoryWhereInput | CategoryWhereInput[],\n     ?   imageUrl?: StringNullableFilter | String | Null,\n     ?   products?: ProductListRelationFilter\n       }\n     })\n\nArgument `where` of type CategoryWhereUniqueInput needs at least one of `id` arguments. Available options are marked with ?.\n    at xn (E:\\Full-Stack Developer\\E-Commerce Project 1.1\\backend\\node_modules\\@prisma\\client\\runtime\\library.js:29:1363)\n    at Bn.handleRequestError (E:\\Full-Stack Developer\\E-Commerce Project 1.1\\backend\\node_modules\\@prisma\\client\\runtime\\library.js:121:7005)\n    at Bn.handleAndLogRequestError (E:\\Full-Stack Developer\\E-Commerce Project 1.1\\backend\\node_modules\\@prisma\\client\\runtime\\library.js:121:6686)\n    at Bn.request (E:\\Full-Stack Developer\\E-Commerce Project 1.1\\backend\\node_modules\\@prisma\\client\\runtime\\library.js:121:6393)\n    at async l (E:\\Full-Stack Developer\\E-Commerce Project 1.1\\backend\\node_modules\\@prisma\\client\\runtime\\library.js:130:9645)\n    at async exports.getCategoryByName (E:\\Full-Stack Developer\\E-Commerce Project 1.1\\backend\\src\\controllers\\categoryController.js:61:22)","timestamp":"2025-03-09T04:10:01.495Z"}
{"level":"error","message":"Error: PrismaClientValidationError: \nInvalid `prisma.category.findUnique()` invocation in\nE:\\Full-Stack Developer\\E-Commerce Project 1.1\\backend\\src\\controllers\\categoryController.js:61:44\n\n  58   return res.status(400).json({ error: \"Category name is required\" });\n  59 }\n  60 // Pastikan field name unik atau gunakan findFirst jika tidak\n→ 61 const category = await prisma.category.findUnique({\n       where: {\n         name: \"handphone\",\n     ?   id?: Int,\n     ?   AND?: CategoryWhereInput | CategoryWhereInput[],\n     ?   OR?: CategoryWhereInput[],\n     ?   NOT?: CategoryWhereInput | CategoryWhereInput[],\n     ?   imageUrl?: StringNullableFilter | String | Null,\n     ?   products?: ProductListRelationFilter\n       }\n     })\n\nArgument `where` of type CategoryWhereUniqueInput needs at least one of `id` arguments. Available options are marked with ?.\n    at xn (E:\\Full-Stack Developer\\E-Commerce Project 1.1\\backend\\node_modules\\@prisma\\client\\runtime\\library.js:29:1363)\n    at Bn.handleRequestError (E:\\Full-Stack Developer\\E-Commerce Project 1.1\\backend\\node_modules\\@prisma\\client\\runtime\\library.js:121:7005)\n    at Bn.handleAndLogRequestError (E:\\Full-Stack Developer\\E-Commerce Project 1.1\\backend\\node_modules\\@prisma\\client\\runtime\\library.js:121:6686)\n    at Bn.request (E:\\Full-Stack Developer\\E-Commerce Project 1.1\\backend\\node_modules\\@prisma\\client\\runtime\\library.js:121:6393)\n    at async l (E:\\Full-Stack Developer\\E-Commerce Project 1.1\\backend\\node_modules\\@prisma\\client\\runtime\\library.js:130:9645)\n    at async exports.getCategoryByName (E:\\Full-Stack Developer\\E-Commerce Project 1.1\\backend\\src\\controllers\\categoryController.js:61:22)","timestamp":"2025-03-09T04:10:02.071Z"}
{"level":"error","message":"Error: PrismaClientValidationError: \nInvalid `prisma.category.findUnique()` invocation in\nE:\\Full-Stack Developer\\E-Commerce Project 1.1\\backend\\src\\controllers\\categoryController.js:66:44\n\n  63 name = name.toLowerCase();\n  64 \n  65 // Gunakan findUnique jika field 'name' unik, atau gunakan findFirst jika tidak\n→ 66 const category = await prisma.category.findUnique({\n       where: {\n         name: \"handphone\",\n     ?   id?: Int,\n     ?   AND?: CategoryWhereInput | CategoryWhereInput[],\n     ?   OR?: CategoryWhereInput[],\n     ?   NOT?: CategoryWhereInput | CategoryWhereInput[],\n     ?   imageUrl?: StringNullableFilter | String | Null,\n     ?   products?: ProductListRelationFilter\n       }\n     })\n\nArgument `where` of type CategoryWhereUniqueInput needs at least one of `id` arguments. Available options are marked with ?.\n    at xn (E:\\Full-Stack Developer\\E-Commerce Project 1.1\\backend\\node_modules\\@prisma\\client\\runtime\\library.js:29:1363)\n    at Bn.handleRequestError (E:\\Full-Stack Developer\\E-Commerce Project 1.1\\backend\\node_modules\\@prisma\\client\\runtime\\library.js:121:7005)\n    at Bn.handleAndLogRequestError (E:\\Full-Stack Developer\\E-Commerce Project 1.1\\backend\\node_modules\\@prisma\\client\\runtime\\library.js:121:6686)\n    at Bn.request (E:\\Full-Stack Developer\\E-Commerce Project 1.1\\backend\\node_modules\\@prisma\\client\\runtime\\library.js:121:6393)\n    at async l (E:\\Full-Stack Developer\\E-Commerce Project 1.1\\backend\\node_modules\\@prisma\\client\\runtime\\library.js:130:9645)\n    at async exports.getCategoryByName (E:\\Full-Stack Developer\\E-Commerce Project 1.1\\backend\\src\\controllers\\categoryController.js:66:22)","timestamp":"2025-03-09T04:16:29.235Z"}
{"level":"error","message":"Error: PrismaClientValidationError: \nInvalid `prisma.category.findUnique()` invocation in\nE:\\Full-Stack Developer\\E-Commerce Project 1.1\\backend\\src\\controllers\\categoryController.js:66:44\n\n  63 name = name.toLowerCase();\n  64 \n  65 // Gunakan findUnique jika field 'name' unik, atau gunakan findFirst jika tidak\n→ 66 const category = await prisma.category.findUnique({\n       where: {\n         name: \"handphone\",\n     ?   id?: Int,\n     ?   AND?: CategoryWhereInput | CategoryWhereInput[],\n     ?   OR?: CategoryWhereInput[],\n     ?   NOT?: CategoryWhereInput | CategoryWhereInput[],\n     ?   imageUrl?: StringNullableFilter | String | Null,\n     ?   products?: ProductListRelationFilter\n       }\n     })\n\nArgument `where` of type CategoryWhereUniqueInput needs at least one of `id` arguments. Available options are marked with ?.\n    at xn (E:\\Full-Stack Developer\\E-Commerce Project 1.1\\backend\\node_modules\\@prisma\\client\\runtime\\library.js:29:1363)\n    at Bn.handleRequestError (E:\\Full-Stack Developer\\E-Commerce Project 1.1\\backend\\node_modules\\@prisma\\client\\runtime\\library.js:121:7005)\n    at Bn.handleAndLogRequestError (E:\\Full-Stack Developer\\E-Commerce Project 1.1\\backend\\node_modules\\@prisma\\client\\runtime\\library.js:121:6686)\n    at Bn.request (E:\\Full-Stack Developer\\E-Commerce Project 1.1\\backend\\node_modules\\@prisma\\client\\runtime\\library.js:121:6393)\n    at async l (E:\\Full-Stack Developer\\E-Commerce Project 1.1\\backend\\node_modules\\@prisma\\client\\runtime\\library.js:130:9645)\n    at async exports.getCategoryByName (E:\\Full-Stack Developer\\E-Commerce Project 1.1\\backend\\src\\controllers\\categoryController.js:66:22)","timestamp":"2025-03-09T04:16:29.828Z"}
{"level":"error","message":"Error: PrismaClientValidationError: \nInvalid `prisma.category.findUnique()` invocation in\nE:\\Full-Stack Developer\\E-Commerce Project 1.1\\backend\\src\\controllers\\categoryController.js:66:44\n\n  63 name = name.toLowerCase();\n  64 \n  65 // Gunakan findUnique jika field 'name' unik, atau gunakan findFirst jika tidak\n→ 66 const category = await prisma.category.findUnique({\n       where: {\n         name: \"handphone\",\n     ?   id?: Int,\n     ?   AND?: CategoryWhereInput | CategoryWhereInput[],\n     ?   OR?: CategoryWhereInput[],\n     ?   NOT?: CategoryWhereInput | CategoryWhereInput[],\n     ?   imageUrl?: StringNullableFilter | String | Null,\n     ?   products?: ProductListRelationFilter\n       }\n     })\n\nArgument `where` of type CategoryWhereUniqueInput needs at least one of `id` arguments. Available options are marked with ?.\n    at xn (E:\\Full-Stack Developer\\E-Commerce Project 1.1\\backend\\node_modules\\@prisma\\client\\runtime\\library.js:29:1363)\n    at Bn.handleRequestError (E:\\Full-Stack Developer\\E-Commerce Project 1.1\\backend\\node_modules\\@prisma\\client\\runtime\\library.js:121:7005)\n    at Bn.handleAndLogRequestError (E:\\Full-Stack Developer\\E-Commerce Project 1.1\\backend\\node_modules\\@prisma\\client\\runtime\\library.js:121:6686)\n    at Bn.request (E:\\Full-Stack Developer\\E-Commerce Project 1.1\\backend\\node_modules\\@prisma\\client\\runtime\\library.js:121:6393)\n    at async l (E:\\Full-Stack Developer\\E-Commerce Project 1.1\\backend\\node_modules\\@prisma\\client\\runtime\\library.js:130:9645)\n    at async exports.getCategoryByName (E:\\Full-Stack Developer\\E-Commerce Project 1.1\\backend\\src\\controllers\\categoryController.js:66:22)","timestamp":"2025-03-09T04:16:30.690Z"}
{"level":"error","message":"Error: PrismaClientValidationError: \nInvalid `prisma.category.findUnique()` invocation in\nE:\\Full-Stack Developer\\E-Commerce Project 1.1\\backend\\src\\controllers\\categoryController.js:66:44\n\n  63 name = name.toLowerCase();\n  64 \n  65 // Gunakan findUnique jika field 'name' unik, atau gunakan findFirst jika tidak\n→ 66 const category = await prisma.category.findUnique({\n       where: {\n         name: \"handphone\",\n     ?   id?: Int,\n     ?   AND?: CategoryWhereInput | CategoryWhereInput[],\n     ?   OR?: CategoryWhereInput[],\n     ?   NOT?: CategoryWhereInput | CategoryWhereInput[],\n     ?   imageUrl?: StringNullableFilter | String | Null,\n     ?   products?: ProductListRelationFilter\n       }\n     })\n\nArgument `where` of type CategoryWhereUniqueInput needs at least one of `id` arguments. Available options are marked with ?.\n    at xn (E:\\Full-Stack Developer\\E-Commerce Project 1.1\\backend\\node_modules\\@prisma\\client\\runtime\\library.js:29:1363)\n    at Bn.handleRequestError (E:\\Full-Stack Developer\\E-Commerce Project 1.1\\backend\\node_modules\\@prisma\\client\\runtime\\library.js:121:7005)\n    at Bn.handleAndLogRequestError (E:\\Full-Stack Developer\\E-Commerce Project 1.1\\backend\\node_modules\\@prisma\\client\\runtime\\library.js:121:6686)\n    at Bn.request (E:\\Full-Stack Developer\\E-Commerce Project 1.1\\backend\\node_modules\\@prisma\\client\\runtime\\library.js:121:6393)\n    at async l (E:\\Full-Stack Developer\\E-Commerce Project 1.1\\backend\\node_modules\\@prisma\\client\\runtime\\library.js:130:9645)\n    at async exports.getCategoryByName (E:\\Full-Stack Developer\\E-Commerce Project 1.1\\backend\\src\\controllers\\categoryController.js:66:22)","timestamp":"2025-03-09T04:16:31.328Z"}
{"level":"error","message":"Error: PrismaClientValidationError: \nInvalid `prisma.category.findUnique()` invocation in\nE:\\Full-Stack Developer\\E-Commerce Project 1.1\\backend\\src\\controllers\\categoryController.js:66:44\n\n  63 name = name.toLowerCase();\n  64 \n  65 // Gunakan findUnique jika field 'name' unik, atau gunakan findFirst jika tidak\n→ 66 const category = await prisma.category.findUnique({\n       where: {\n         name: \"handphone\",\n     ?   id?: Int,\n     ?   AND?: CategoryWhereInput | CategoryWhereInput[],\n     ?   OR?: CategoryWhereInput[],\n     ?   NOT?: CategoryWhereInput | CategoryWhereInput[],\n     ?   imageUrl?: StringNullableFilter | String | Null,\n     ?   products?: ProductListRelationFilter\n       }\n     })\n\nArgument `where` of type CategoryWhereUniqueInput needs at least one of `id` arguments. Available options are marked with ?.\n    at xn (E:\\Full-Stack Developer\\E-Commerce Project 1.1\\backend\\node_modules\\@prisma\\client\\runtime\\library.js:29:1363)\n    at Bn.handleRequestError (E:\\Full-Stack Developer\\E-Commerce Project 1.1\\backend\\node_modules\\@prisma\\client\\runtime\\library.js:121:7005)\n    at Bn.handleAndLogRequestError (E:\\Full-Stack Developer\\E-Commerce Project 1.1\\backend\\node_modules\\@prisma\\client\\runtime\\library.js:121:6686)\n    at Bn.request (E:\\Full-Stack Developer\\E-Commerce Project 1.1\\backend\\node_modules\\@prisma\\client\\runtime\\library.js:121:6393)\n    at async l (E:\\Full-Stack Developer\\E-Commerce Project 1.1\\backend\\node_modules\\@prisma\\client\\runtime\\library.js:130:9645)\n    at async exports.getCategoryByName (E:\\Full-Stack Developer\\E-Commerce Project 1.1\\backend\\src\\controllers\\categoryController.js:66:22)","timestamp":"2025-03-09T04:16:32.161Z"}
{"level":"error","message":"Error: PrismaClientValidationError: \nInvalid `prisma.category.findUnique()` invocation in\nE:\\Full-Stack Developer\\E-Commerce Project 1.1\\backend\\src\\controllers\\categoryController.js:66:44\n\n  63 name = name.toLowerCase();\n  64 \n  65 // Gunakan findUnique jika field 'name' unik, atau gunakan findFirst jika tidak\n→ 66 const category = await prisma.category.findUnique({\n       where: {\n         name: \"handphone\",\n     ?   id?: Int,\n     ?   AND?: CategoryWhereInput | CategoryWhereInput[],\n     ?   OR?: CategoryWhereInput[],\n     ?   NOT?: CategoryWhereInput | CategoryWhereInput[],\n     ?   imageUrl?: StringNullableFilter | String | Null,\n     ?   products?: ProductListRelationFilter\n       }\n     })\n\nArgument `where` of type CategoryWhereUniqueInput needs at least one of `id` arguments. Available options are marked with ?.\n    at xn (E:\\Full-Stack Developer\\E-Commerce Project 1.1\\backend\\node_modules\\@prisma\\client\\runtime\\library.js:29:1363)\n    at Bn.handleRequestError (E:\\Full-Stack Developer\\E-Commerce Project 1.1\\backend\\node_modules\\@prisma\\client\\runtime\\library.js:121:7005)\n    at Bn.handleAndLogRequestError (E:\\Full-Stack Developer\\E-Commerce Project 1.1\\backend\\node_modules\\@prisma\\client\\runtime\\library.js:121:6686)\n    at Bn.request (E:\\Full-Stack Developer\\E-Commerce Project 1.1\\backend\\node_modules\\@prisma\\client\\runtime\\library.js:121:6393)\n    at async l (E:\\Full-Stack Developer\\E-Commerce Project 1.1\\backend\\node_modules\\@prisma\\client\\runtime\\library.js:130:9645)\n    at async exports.getCategoryByName (E:\\Full-Stack Developer\\E-Commerce Project 1.1\\backend\\src\\controllers\\categoryController.js:66:22)","timestamp":"2025-03-09T04:16:32.754Z"}
{"level":"error","message":"Error: PrismaClientValidationError: \nInvalid `prisma.category.findUnique()` invocation in\nE:\\Full-Stack Developer\\E-Commerce Project 1.1\\backend\\src\\controllers\\categoryController.js:66:44\n\n  63 name = name.toLowerCase();\n  64 \n  65 // Gunakan findUnique jika field 'name' unik, atau gunakan findFirst jika tidak\n→ 66 const category = await prisma.category.findUnique({\n       where: {\n         name: \"handphone\",\n     ?   id?: Int,\n     ?   AND?: CategoryWhereInput | CategoryWhereInput[],\n     ?   OR?: CategoryWhereInput[],\n     ?   NOT?: CategoryWhereInput | CategoryWhereInput[],\n     ?   imageUrl?: StringNullableFilter | String | Null,\n     ?   products?: ProductListRelationFilter\n       }\n     })\n\nArgument `where` of type CategoryWhereUniqueInput needs at least one of `id` arguments. Available options are marked with ?.\n    at xn (E:\\Full-Stack Developer\\E-Commerce Project 1.1\\backend\\node_modules\\@prisma\\client\\runtime\\library.js:29:1363)\n    at Bn.handleRequestError (E:\\Full-Stack Developer\\E-Commerce Project 1.1\\backend\\node_modules\\@prisma\\client\\runtime\\library.js:121:7005)\n    at Bn.handleAndLogRequestError (E:\\Full-Stack Developer\\E-Commerce Project 1.1\\backend\\node_modules\\@prisma\\client\\runtime\\library.js:121:6686)\n    at Bn.request (E:\\Full-Stack Developer\\E-Commerce Project 1.1\\backend\\node_modules\\@prisma\\client\\runtime\\library.js:121:6393)\n    at async l (E:\\Full-Stack Developer\\E-Commerce Project 1.1\\backend\\node_modules\\@prisma\\client\\runtime\\library.js:130:9645)\n    at async exports.getCategoryByName (E:\\Full-Stack Developer\\E-Commerce Project 1.1\\backend\\src\\controllers\\categoryController.js:66:22)","timestamp":"2025-03-09T04:16:33.369Z"}
{"level":"error","message":"Error: PrismaClientValidationError: \nInvalid `prisma.category.findUnique()` invocation in\nE:\\Full-Stack Developer\\E-Commerce Project 1.1\\backend\\src\\controllers\\categoryController.js:66:44\n\n  63 name = name.toLowerCase();\n  64 \n  65 // Gunakan findUnique jika field 'name' unik, atau gunakan findFirst jika tidak\n→ 66 const category = await prisma.category.findUnique({\n       where: {\n         name: \"handphone\",\n     ?   id?: Int,\n     ?   AND?: CategoryWhereInput | CategoryWhereInput[],\n     ?   OR?: CategoryWhereInput[],\n     ?   NOT?: CategoryWhereInput | CategoryWhereInput[],\n     ?   imageUrl?: StringNullableFilter | String | Null,\n     ?   products?: ProductListRelationFilter\n       }\n     })\n\nArgument `where` of type CategoryWhereUniqueInput needs at least one of `id` arguments. Available options are marked with ?.\n    at xn (E:\\Full-Stack Developer\\E-Commerce Project 1.1\\backend\\node_modules\\@prisma\\client\\runtime\\library.js:29:1363)\n    at Bn.handleRequestError (E:\\Full-Stack Developer\\E-Commerce Project 1.1\\backend\\node_modules\\@prisma\\client\\runtime\\library.js:121:7005)\n    at Bn.handleAndLogRequestError (E:\\Full-Stack Developer\\E-Commerce Project 1.1\\backend\\node_modules\\@prisma\\client\\runtime\\library.js:121:6686)\n    at Bn.request (E:\\Full-Stack Developer\\E-Commerce Project 1.1\\backend\\node_modules\\@prisma\\client\\runtime\\library.js:121:6393)\n    at async l (E:\\Full-Stack Developer\\E-Commerce Project 1.1\\backend\\node_modules\\@prisma\\client\\runtime\\library.js:130:9645)\n    at async exports.getCategoryByName (E:\\Full-Stack Developer\\E-Commerce Project 1.1\\backend\\src\\controllers\\categoryController.js:66:22)","timestamp":"2025-03-09T04:16:33.881Z"}
{"level":"error","message":"Error: PrismaClientValidationError: \nInvalid `prisma.category.findUnique()` invocation in\nE:\\Full-Stack Developer\\E-Commerce Project 1.1\\backend\\src\\controllers\\categoryController.js:66:44\n\n  63 name = name.toLowerCase();\n  64 \n  65 // Gunakan findUnique jika field 'name' unik, atau gunakan findFirst jika tidak\n→ 66 const category = await prisma.category.findUnique({\n       where: {\n         name: \"handphone\",\n     ?   id?: Int,\n     ?   AND?: CategoryWhereInput | CategoryWhereInput[],\n     ?   OR?: CategoryWhereInput[],\n     ?   NOT?: CategoryWhereInput | CategoryWhereInput[],\n     ?   imageUrl?: StringNullableFilter | String | Null,\n     ?   products?: ProductListRelationFilter\n       }\n     })\n\nArgument `where` of type CategoryWhereUniqueInput needs at least one of `id` arguments. Available options are marked with ?.\n    at xn (E:\\Full-Stack Developer\\E-Commerce Project 1.1\\backend\\node_modules\\@prisma\\client\\runtime\\library.js:29:1363)\n    at Bn.handleRequestError (E:\\Full-Stack Developer\\E-Commerce Project 1.1\\backend\\node_modules\\@prisma\\client\\runtime\\library.js:121:7005)\n    at Bn.handleAndLogRequestError (E:\\Full-Stack Developer\\E-Commerce Project 1.1\\backend\\node_modules\\@prisma\\client\\runtime\\library.js:121:6686)\n    at Bn.request (E:\\Full-Stack Developer\\E-Commerce Project 1.1\\backend\\node_modules\\@prisma\\client\\runtime\\library.js:121:6393)\n    at async l (E:\\Full-Stack Developer\\E-Commerce Project 1.1\\backend\\node_modules\\@prisma\\client\\runtime\\library.js:130:9645)\n    at async exports.getCategoryByName (E:\\Full-Stack Developer\\E-Commerce Project 1.1\\backend\\src\\controllers\\categoryController.js:66:22)","timestamp":"2025-03-09T04:16:34.487Z"}
{"level":"error","message":"Error: PrismaClientValidationError: \nInvalid `prisma.category.findUnique()` invocation in\nE:\\Full-Stack Developer\\E-Commerce Project 1.1\\backend\\src\\controllers\\categoryController.js:66:44\n\n  63 name = name.toLowerCase();\n  64 \n  65 // Gunakan findUnique jika field 'name' unik, atau gunakan findFirst jika tidak\n→ 66 const category = await prisma.category.findUnique({\n       where: {\n         name: \"handphone\",\n     ?   id?: Int,\n     ?   AND?: CategoryWhereInput | CategoryWhereInput[],\n     ?   OR?: CategoryWhereInput[],\n     ?   NOT?: CategoryWhereInput | CategoryWhereInput[],\n     ?   imageUrl?: StringNullableFilter | String | Null,\n     ?   products?: ProductListRelationFilter\n       }\n     })\n\nArgument `where` of type CategoryWhereUniqueInput needs at least one of `id` arguments. Available options are marked with ?.\n    at xn (E:\\Full-Stack Developer\\E-Commerce Project 1.1\\backend\\node_modules\\@prisma\\client\\runtime\\library.js:29:1363)\n    at Bn.handleRequestError (E:\\Full-Stack Developer\\E-Commerce Project 1.1\\backend\\node_modules\\@prisma\\client\\runtime\\library.js:121:7005)\n    at Bn.handleAndLogRequestError (E:\\Full-Stack Developer\\E-Commerce Project 1.1\\backend\\node_modules\\@prisma\\client\\runtime\\library.js:121:6686)\n    at Bn.request (E:\\Full-Stack Developer\\E-Commerce Project 1.1\\backend\\node_modules\\@prisma\\client\\runtime\\library.js:121:6393)\n    at async l (E:\\Full-Stack Developer\\E-Commerce Project 1.1\\backend\\node_modules\\@prisma\\client\\runtime\\library.js:130:9645)\n    at async exports.getCategoryByName (E:\\Full-Stack Developer\\E-Commerce Project 1.1\\backend\\src\\controllers\\categoryController.js:66:22)","timestamp":"2025-03-09T04:16:35.269Z"}
{"level":"error","message":"Error: PrismaClientValidationError: \nInvalid `prisma.category.findUnique()` invocation in\nE:\\Full-Stack Developer\\E-Commerce Project 1.1\\backend\\src\\controllers\\categoryController.js:66:44\n\n  63 name = name.toLowerCase();\n  64 \n  65 // Gunakan findUnique jika field 'name' unik, atau gunakan findFirst jika tidak\n→ 66 const category = await prisma.category.findUnique({\n       where: {\n         name: \"handphone\",\n     ?   id?: Int,\n     ?   AND?: CategoryWhereInput | CategoryWhereInput[],\n     ?   OR?: CategoryWhereInput[],\n     ?   NOT?: CategoryWhereInput | CategoryWhereInput[],\n     ?   imageUrl?: StringNullableFilter | String | Null,\n     ?   products?: ProductListRelationFilter\n       }\n     })\n\nArgument `where` of type CategoryWhereUniqueInput needs at least one of `id` arguments. Available options are marked with ?.\n    at xn (E:\\Full-Stack Developer\\E-Commerce Project 1.1\\backend\\node_modules\\@prisma\\client\\runtime\\library.js:29:1363)\n    at Bn.handleRequestError (E:\\Full-Stack Developer\\E-Commerce Project 1.1\\backend\\node_modules\\@prisma\\client\\runtime\\library.js:121:7005)\n    at Bn.handleAndLogRequestError (E:\\Full-Stack Developer\\E-Commerce Project 1.1\\backend\\node_modules\\@prisma\\client\\runtime\\library.js:121:6686)\n    at Bn.request (E:\\Full-Stack Developer\\E-Commerce Project 1.1\\backend\\node_modules\\@prisma\\client\\runtime\\library.js:121:6393)\n    at async l (E:\\Full-Stack Developer\\E-Commerce Project 1.1\\backend\\node_modules\\@prisma\\client\\runtime\\library.js:130:9645)\n    at async exports.getCategoryByName (E:\\Full-Stack Developer\\E-Commerce Project 1.1\\backend\\src\\controllers\\categoryController.js:66:22)","timestamp":"2025-03-09T04:16:35.935Z"}
{"level":"error","message":"Error: PrismaClientValidationError: \nInvalid `prisma.category.findUnique()` invocation in\nE:\\Full-Stack Developer\\E-Commerce Project 1.1\\backend\\src\\controllers\\categoryController.js:66:44\n\n  63 name = name.toLowerCase();\n  64 \n  65 // Gunakan findUnique jika field 'name' unik, atau gunakan findFirst jika tidak\n→ 66 const category = await prisma.category.findUnique({\n       where: {\n         name: \"handphone\",\n     ?   id?: Int,\n     ?   AND?: CategoryWhereInput | CategoryWhereInput[],\n     ?   OR?: CategoryWhereInput[],\n     ?   NOT?: CategoryWhereInput | CategoryWhereInput[],\n     ?   imageUrl?: StringNullableFilter | String | Null,\n     ?   products?: ProductListRelationFilter\n       }\n     })\n\nArgument `where` of type CategoryWhereUniqueInput needs at least one of `id` arguments. Available options are marked with ?.\n    at xn (E:\\Full-Stack Developer\\E-Commerce Project 1.1\\backend\\node_modules\\@prisma\\client\\runtime\\library.js:29:1363)\n    at Bn.handleRequestError (E:\\Full-Stack Developer\\E-Commerce Project 1.1\\backend\\node_modules\\@prisma\\client\\runtime\\library.js:121:7005)\n    at Bn.handleAndLogRequestError (E:\\Full-Stack Developer\\E-Commerce Project 1.1\\backend\\node_modules\\@prisma\\client\\runtime\\library.js:121:6686)\n    at Bn.request (E:\\Full-Stack Developer\\E-Commerce Project 1.1\\backend\\node_modules\\@prisma\\client\\runtime\\library.js:121:6393)\n    at async l (E:\\Full-Stack Developer\\E-Commerce Project 1.1\\backend\\node_modules\\@prisma\\client\\runtime\\library.js:130:9645)\n    at async exports.getCategoryByName (E:\\Full-Stack Developer\\E-Commerce Project 1.1\\backend\\src\\controllers\\categoryController.js:66:22)","timestamp":"2025-03-09T04:16:36.706Z"}
{"level":"error","message":"Error: PrismaClientValidationError: \nInvalid `prisma.category.findUnique()` invocation in\nE:\\Full-Stack Developer\\E-Commerce Project 1.1\\backend\\src\\controllers\\categoryController.js:66:44\n\n  63 name = name.toLowerCase();\n  64 \n  65 // Gunakan findUnique jika field 'name' unik, atau gunakan findFirst jika tidak\n→ 66 const category = await prisma.category.findUnique({\n       where: {\n         name: \"laptop\",\n     ?   id?: Int,\n     ?   AND?: CategoryWhereInput | CategoryWhereInput[],\n     ?   OR?: CategoryWhereInput[],\n     ?   NOT?: CategoryWhereInput | CategoryWhereInput[],\n     ?   imageUrl?: StringNullableFilter | String | Null,\n     ?   products?: ProductListRelationFilter\n       }\n     })\n\nArgument `where` of type CategoryWhereUniqueInput needs at least one of `id` arguments. Available options are marked with ?.\n    at xn (E:\\Full-Stack Developer\\E-Commerce Project 1.1\\backend\\node_modules\\@prisma\\client\\runtime\\library.js:29:1363)\n    at Bn.handleRequestError (E:\\Full-Stack Developer\\E-Commerce Project 1.1\\backend\\node_modules\\@prisma\\client\\runtime\\library.js:121:7005)\n    at Bn.handleAndLogRequestError (E:\\Full-Stack Developer\\E-Commerce Project 1.1\\backend\\node_modules\\@prisma\\client\\runtime\\library.js:121:6686)\n    at Bn.request (E:\\Full-Stack Developer\\E-Commerce Project 1.1\\backend\\node_modules\\@prisma\\client\\runtime\\library.js:121:6393)\n    at async l (E:\\Full-Stack Developer\\E-Commerce Project 1.1\\backend\\node_modules\\@prisma\\client\\runtime\\library.js:130:9645)\n    at async exports.getCategoryByName (E:\\Full-Stack Developer\\E-Commerce Project 1.1\\backend\\src\\controllers\\categoryController.js:66:22)","timestamp":"2025-03-09T04:16:44.755Z"}
{"level":"error","message":"Error: PrismaClientValidationError: \nInvalid `prisma.category.findUnique()` invocation in\nE:\\Full-Stack Developer\\E-Commerce Project 1.1\\backend\\src\\controllers\\categoryController.js:66:44\n\n  63 name = name.toLowerCase();\n  64 \n  65 // Gunakan findUnique jika field 'name' unik, atau gunakan findFirst jika tidak\n→ 66 const category = await prisma.category.findUnique({\n       where: {\n         name: \"laptop\",\n     ?   id?: Int,\n     ?   AND?: CategoryWhereInput | CategoryWhereInput[],\n     ?   OR?: CategoryWhereInput[],\n     ?   NOT?: CategoryWhereInput | CategoryWhereInput[],\n     ?   imageUrl?: StringNullableFilter | String | Null,\n     ?   products?: ProductListRelationFilter\n       }\n     })\n\nArgument `where` of type CategoryWhereUniqueInput needs at least one of `id` arguments. Available options are marked with ?.\n    at xn (E:\\Full-Stack Developer\\E-Commerce Project 1.1\\backend\\node_modules\\@prisma\\client\\runtime\\library.js:29:1363)\n    at Bn.handleRequestError (E:\\Full-Stack Developer\\E-Commerce Project 1.1\\backend\\node_modules\\@prisma\\client\\runtime\\library.js:121:7005)\n    at Bn.handleAndLogRequestError (E:\\Full-Stack Developer\\E-Commerce Project 1.1\\backend\\node_modules\\@prisma\\client\\runtime\\library.js:121:6686)\n    at Bn.request (E:\\Full-Stack Developer\\E-Commerce Project 1.1\\backend\\node_modules\\@prisma\\client\\runtime\\library.js:121:6393)\n    at async l (E:\\Full-Stack Developer\\E-Commerce Project 1.1\\backend\\node_modules\\@prisma\\client\\runtime\\library.js:130:9645)\n    at async exports.getCategoryByName (E:\\Full-Stack Developer\\E-Commerce Project 1.1\\backend\\src\\controllers\\categoryController.js:66:22)","timestamp":"2025-03-09T04:16:45.392Z"}
{"level":"error","message":"Error: PrismaClientValidationError: \nInvalid `prisma.category.findUnique()` invocation in\nE:\\Full-Stack Developer\\E-Commerce Project 1.1\\backend\\src\\controllers\\categoryController.js:66:44\n\n  63 name = name.toLowerCase();\n  64 \n  65 // Gunakan findUnique jika field 'name' unik, atau gunakan findFirst jika tidak\n→ 66 const category = await prisma.category.findUnique({\n       where: {\n         name: \"laptop\",\n     ?   id?: Int,\n     ?   AND?: CategoryWhereInput | CategoryWhereInput[],\n     ?   OR?: CategoryWhereInput[],\n     ?   NOT?: CategoryWhereInput | CategoryWhereInput[],\n     ?   imageUrl?: StringNullableFilter | String | Null,\n     ?   products?: ProductListRelationFilter\n       }\n     })\n\nArgument `where` of type CategoryWhereUniqueInput needs at least one of `id` arguments. Available options are marked with ?.\n    at xn (E:\\Full-Stack Developer\\E-Commerce Project 1.1\\backend\\node_modules\\@prisma\\client\\runtime\\library.js:29:1363)\n    at Bn.handleRequestError (E:\\Full-Stack Developer\\E-Commerce Project 1.1\\backend\\node_modules\\@prisma\\client\\runtime\\library.js:121:7005)\n    at Bn.handleAndLogRequestError (E:\\Full-Stack Developer\\E-Commerce Project 1.1\\backend\\node_modules\\@prisma\\client\\runtime\\library.js:121:6686)\n    at Bn.request (E:\\Full-Stack Developer\\E-Commerce Project 1.1\\backend\\node_modules\\@prisma\\client\\runtime\\library.js:121:6393)\n    at async l (E:\\Full-Stack Developer\\E-Commerce Project 1.1\\backend\\node_modules\\@prisma\\client\\runtime\\library.js:130:9645)\n    at async exports.getCategoryByName (E:\\Full-Stack Developer\\E-Commerce Project 1.1\\backend\\src\\controllers\\categoryController.js:66:22)","timestamp":"2025-03-09T04:16:45.989Z"}
{"level":"error","message":"Error: PrismaClientValidationError: \nInvalid `prisma.category.findUnique()` invocation in\nE:\\Full-Stack Developer\\E-Commerce Project 1.1\\backend\\src\\controllers\\categoryController.js:66:44\n\n  63 name = name.toLowerCase();\n  64 \n  65 // Gunakan findUnique jika field 'name' unik, atau gunakan findFirst jika tidak\n→ 66 const category = await prisma.category.findUnique({\n       where: {\n         name: \"laptop\",\n     ?   id?: Int,\n     ?   AND?: CategoryWhereInput | CategoryWhereInput[],\n     ?   OR?: CategoryWhereInput[],\n     ?   NOT?: CategoryWhereInput | CategoryWhereInput[],\n     ?   imageUrl?: StringNullableFilter | String | Null,\n     ?   products?: ProductListRelationFilter\n       }\n     })\n\nArgument `where` of type CategoryWhereUniqueInput needs at least one of `id` arguments. Available options are marked with ?.\n    at xn (E:\\Full-Stack Developer\\E-Commerce Project 1.1\\backend\\node_modules\\@prisma\\client\\runtime\\library.js:29:1363)\n    at Bn.handleRequestError (E:\\Full-Stack Developer\\E-Commerce Project 1.1\\backend\\node_modules\\@prisma\\client\\runtime\\library.js:121:7005)\n    at Bn.handleAndLogRequestError (E:\\Full-Stack Developer\\E-Commerce Project 1.1\\backend\\node_modules\\@prisma\\client\\runtime\\library.js:121:6686)\n    at Bn.request (E:\\Full-Stack Developer\\E-Commerce Project 1.1\\backend\\node_modules\\@prisma\\client\\runtime\\library.js:121:6393)\n    at async l (E:\\Full-Stack Developer\\E-Commerce Project 1.1\\backend\\node_modules\\@prisma\\client\\runtime\\library.js:130:9645)\n    at async exports.getCategoryByName (E:\\Full-Stack Developer\\E-Commerce Project 1.1\\backend\\src\\controllers\\categoryController.js:66:22)","timestamp":"2025-03-09T04:16:46.518Z"}
{"level":"error","message":"Refresh token error: Cannot read properties of undefined (reading 'refreshToken')","timestamp":"2025-03-09T09:34:55.022Z"}
{"level":"error","message":"Refresh token error: Cannot read properties of undefined (reading 'refreshToken')","timestamp":"2025-03-09T09:34:55.044Z"}
{"level":"error","message":"Refresh token error: Cannot read properties of undefined (reading 'refreshToken')","timestamp":"2025-03-09T11:01:36.009Z"}
{"level":"error","message":"Refresh token error: Cannot read properties of undefined (reading 'refreshToken')","timestamp":"2025-03-09T11:01:36.016Z"}
{"level":"error","message":"Refresh token error: Cannot read properties of undefined (reading 'refreshToken')","timestamp":"2025-03-09T11:01:36.020Z"}
{"level":"error","message":"Refresh token error: Cannot read properties of undefined (reading 'refreshToken')","timestamp":"2025-03-09T13:11:16.013Z"}
{"level":"error","message":"Refresh token error: Cannot read properties of undefined (reading 'refreshToken')","timestamp":"2025-03-09T13:11:16.020Z"}
{"level":"error","message":"Refresh token error: Cannot read properties of undefined (reading 'refreshToken')","timestamp":"2025-03-09T13:11:16.027Z"}
{"level":"error","message":"Refresh token error: Cannot read properties of undefined (reading 'refreshToken')","timestamp":"2025-03-09T13:16:27.268Z"}
{"level":"error","message":"Error: ReferenceError: prisma is not defined\n    at exports.getReviewsByUser (E:\\Full-Stack Developer\\E-Commerce Project 1.1\\backend\\src\\controllers\\userController.js:52:21)\n    at Layer.handle [as handle_request] (E:\\Full-Stack Developer\\E-Commerce Project 1.1\\backend\\node_modules\\express\\lib\\router\\layer.js:95:5)\n    at next (E:\\Full-Stack Developer\\E-Commerce Project 1.1\\backend\\node_modules\\express\\lib\\router\\route.js:149:13)\n    at authMiddleware (E:\\Full-Stack Developer\\E-Commerce Project 1.1\\backend\\src\\middlewares\\authMiddleware.js:13:5)\n    at Layer.handle [as handle_request] (E:\\Full-Stack Developer\\E-Commerce Project 1.1\\backend\\node_modules\\express\\lib\\router\\layer.js:95:5)\n    at next (E:\\Full-Stack Developer\\E-Commerce Project 1.1\\backend\\node_modules\\express\\lib\\router\\route.js:149:13)\n    at Route.dispatch (E:\\Full-Stack Developer\\E-Commerce Project 1.1\\backend\\node_modules\\express\\lib\\router\\route.js:119:3)\n    at Layer.handle [as handle_request] (E:\\Full-Stack Developer\\E-Commerce Project 1.1\\backend\\node_modules\\express\\lib\\router\\layer.js:95:5)\n    at E:\\Full-Stack Developer\\E-Commerce Project 1.1\\backend\\node_modules\\express\\lib\\router\\index.js:284:15\n    at Function.process_params (E:\\Full-Stack Developer\\E-Commerce Project 1.1\\backend\\node_modules\\express\\lib\\router\\index.js:346:12)","timestamp":"2025-03-09T14:31:23.054Z"}
{"level":"error","message":"Error: ReferenceError: prisma is not defined\n    at exports.getReviewsByUser (E:\\Full-Stack Developer\\E-Commerce Project 1.1\\backend\\src\\controllers\\userController.js:52:21)\n    at Layer.handle [as handle_request] (E:\\Full-Stack Developer\\E-Commerce Project 1.1\\backend\\node_modules\\express\\lib\\router\\layer.js:95:5)\n    at next (E:\\Full-Stack Developer\\E-Commerce Project 1.1\\backend\\node_modules\\express\\lib\\router\\route.js:149:13)\n    at authMiddleware (E:\\Full-Stack Developer\\E-Commerce Project 1.1\\backend\\src\\middlewares\\authMiddleware.js:13:5)\n    at Layer.handle [as handle_request] (E:\\Full-Stack Developer\\E-Commerce Project 1.1\\backend\\node_modules\\express\\lib\\router\\layer.js:95:5)\n    at next (E:\\Full-Stack Developer\\E-Commerce Project 1.1\\backend\\node_modules\\express\\lib\\router\\route.js:149:13)\n    at Route.dispatch (E:\\Full-Stack Developer\\E-Commerce Project 1.1\\backend\\node_modules\\express\\lib\\router\\route.js:119:3)\n    at Layer.handle [as handle_request] (E:\\Full-Stack Developer\\E-Commerce Project 1.1\\backend\\node_modules\\express\\lib\\router\\layer.js:95:5)\n    at E:\\Full-Stack Developer\\E-Commerce Project 1.1\\backend\\node_modules\\express\\lib\\router\\index.js:284:15\n    at Function.process_params (E:\\Full-Stack Developer\\E-Commerce Project 1.1\\backend\\node_modules\\express\\lib\\router\\index.js:346:12)","timestamp":"2025-03-09T14:31:23.096Z"}
{"level":"error","message":"Error: ReferenceError: prisma is not defined\n    at exports.getReviewsByUser (E:\\Full-Stack Developer\\E-Commerce Project 1.1\\backend\\src\\controllers\\userController.js:52:21)\n    at Layer.handle [as handle_request] (E:\\Full-Stack Developer\\E-Commerce Project 1.1\\backend\\node_modules\\express\\lib\\router\\layer.js:95:5)\n    at next (E:\\Full-Stack Developer\\E-Commerce Project 1.1\\backend\\node_modules\\express\\lib\\router\\route.js:149:13)\n    at authMiddleware (E:\\Full-Stack Developer\\E-Commerce Project 1.1\\backend\\src\\middlewares\\authMiddleware.js:13:5)\n    at Layer.handle [as handle_request] (E:\\Full-Stack Developer\\E-Commerce Project 1.1\\backend\\node_modules\\express\\lib\\router\\layer.js:95:5)\n    at next (E:\\Full-Stack Developer\\E-Commerce Project 1.1\\backend\\node_modules\\express\\lib\\router\\route.js:149:13)\n    at Route.dispatch (E:\\Full-Stack Developer\\E-Commerce Project 1.1\\backend\\node_modules\\express\\lib\\router\\route.js:119:3)\n    at Layer.handle [as handle_request] (E:\\Full-Stack Developer\\E-Commerce Project 1.1\\backend\\node_modules\\express\\lib\\router\\layer.js:95:5)\n    at E:\\Full-Stack Developer\\E-Commerce Project 1.1\\backend\\node_modules\\express\\lib\\router\\index.js:284:15\n    at Function.process_params (E:\\Full-Stack Developer\\E-Commerce Project 1.1\\backend\\node_modules\\express\\lib\\router\\index.js:346:12)","timestamp":"2025-03-09T14:31:36.722Z"}
{"level":"error","message":"Error: ReferenceError: prisma is not defined\n    at exports.getReviewsByUser (E:\\Full-Stack Developer\\E-Commerce Project 1.1\\backend\\src\\controllers\\userController.js:52:21)\n    at Layer.handle [as handle_request] (E:\\Full-Stack Developer\\E-Commerce Project 1.1\\backend\\node_modules\\express\\lib\\router\\layer.js:95:5)\n    at next (E:\\Full-Stack Developer\\E-Commerce Project 1.1\\backend\\node_modules\\express\\lib\\router\\route.js:149:13)\n    at authMiddleware (E:\\Full-Stack Developer\\E-Commerce Project 1.1\\backend\\src\\middlewares\\authMiddleware.js:13:5)\n    at Layer.handle [as handle_request] (E:\\Full-Stack Developer\\E-Commerce Project 1.1\\backend\\node_modules\\express\\lib\\router\\layer.js:95:5)\n    at next (E:\\Full-Stack Developer\\E-Commerce Project 1.1\\backend\\node_modules\\express\\lib\\router\\route.js:149:13)\n    at Route.dispatch (E:\\Full-Stack Developer\\E-Commerce Project 1.1\\backend\\node_modules\\express\\lib\\router\\route.js:119:3)\n    at Layer.handle [as handle_request] (E:\\Full-Stack Developer\\E-Commerce Project 1.1\\backend\\node_modules\\express\\lib\\router\\layer.js:95:5)\n    at E:\\Full-Stack Developer\\E-Commerce Project 1.1\\backend\\node_modules\\express\\lib\\router\\index.js:284:15\n    at Function.process_params (E:\\Full-Stack Developer\\E-Commerce Project 1.1\\backend\\node_modules\\express\\lib\\router\\index.js:346:12)","timestamp":"2025-03-09T14:31:36.736Z"}
2025-03-10T02:11:20.663Z [ERROR]: [GET] /api/users/reviews - prisma is not defined
2025-03-10T02:11:20.699Z [ERROR]: [GET] /api/users/reviews - prisma is not defined
2025-03-10T02:11:39.277Z [ERROR]: [GET] /api/users/reviews - prisma is not defined
2025-03-10T02:13:20.101Z [ERROR]: [GET] /api/users/reviews - prisma is not defined
2025-03-10T02:13:45.942Z [ERROR]: [GET] /api/users/reviews - prisma is not defined
2025-03-10T02:54:56.512Z [ERROR]: [GET] /api/users/reviews - prisma is not defined
2025-03-10T02:54:56.530Z [ERROR]: [GET] /api/users/reviews - prisma is not defined
2025-03-10T02:55:29.433Z [ERROR]: [GET] /api/users/reviews - prisma is not defined
2025-03-10T02:56:06.182Z [ERROR]: [GET] /api/users/reviews - prisma is not defined
2025-03-10T02:56:37.858Z [ERROR]: [GET] /api/users/reviews - prisma is not defined
2025-03-10T02:57:13.294Z [ERROR]: [GET] /api/users/reviews - prisma is not defined
2025-03-10T03:02:53.433Z [ERROR]: [GET] /api/users/reviews - prisma is not defined
2025-03-10T03:06:46.092Z [ERROR]: [GET] /api/users/reviews - prisma is not defined
2025-03-10T03:12:11.916Z [ERROR]: [GET] /api/users/reviews - prisma is not defined
2025-03-10T03:12:11.981Z [ERROR]: [GET] /api/users/reviews - prisma is not defined
2025-03-10T03:12:16.368Z [ERROR]: [GET] /api/users/reviews - prisma is not defined
2025-03-10T03:13:13.780Z [ERROR]: [GET] /api/users/reviews - prisma is not defined
2025-03-10T03:14:01.454Z [ERROR]: [GET] /api/users/reviews - prisma is not defined
2025-03-10T03:14:22.527Z [ERROR]: [GET] /api/users/reviews - prisma is not defined
2025-03-10T03:14:32.366Z [ERROR]: [GET] /api/users/reviews - prisma is not defined
2025-03-10T03:14:43.168Z [ERROR]: [GET] /api/users/reviews - prisma is not defined
2025-03-10T03:15:53.009Z [ERROR]: [GET] /api/users/reviews - prisma is not defined
2025-03-10T03:18:17.403Z [ERROR]: [GET] /api/users/reviews - prisma is not defined
2025-03-10T03:18:50.243Z [ERROR]: [GET] /api/users/reviews - prisma is not defined
2025-03-10T03:19:49.621Z [ERROR]: [GET] /api/users/reviews - prisma is not defined
2025-03-10T05:32:49.518Z [ERROR]: [GET] /api/auth/google/callback?code=4%2F0AQSTgQHBZBEugvhCSeKVhpydohiHVwrRxW3iXHRGd-KXUXWwrmN2z7pFHU3r9ZQP5Y1hHQ&scope=email+profile+openid+https%3A%2F%2Fwww.googleapis.com%2Fauth%2Fuserinfo.profile+https%3A%2F%2Fwww.googleapis.com%2Fauth%2Fuserinfo.email&authuser=0&prompt=consent - Login sessions require session support. Did you forget to use `express-session` middleware?
2025-03-11T03:08:46.704Z [ERROR]: [GET] /api/auth/google/callback?code=4%2F0AQSTgQH-9Ppjy5fqAUxcuWvUvef7jGT018rbktjQMCXHoKzTFT0GW7P2V-pCGqdSHG7_ug&scope=email+profile+openid+https%3A%2F%2Fwww.googleapis.com%2Fauth%2Fuserinfo.profile+https%3A%2F%2Fwww.googleapis.com%2Fauth%2Fuserinfo.email&authuser=0&prompt=consent - Login sessions require session support. Did you forget to use `express-session` middleware?
2025-03-11T06:47:30.666Z [ERROR]: [GET] /api/products?sortBy=createdAt&order=desc - 
Invalid `prisma.product.findMany()` invocation in
E:\Full-Stack Developer\E-Commerce Project 1.1\backend\src\controllers\productController.js:37:43

  34 const pageSize = parseInt(limit, 10) || null;
  35 const skip = (pageNumber - 1) * pageSize;
  36 
→ 37 const products = await prisma.product.findMany({
       where: {},
       orderBy: {
         createdAt: "desc"
       },
       skip: 0,
       include: {
         reviews: {
           select: {
             rating: true
           }
         },
         category: true
       },
     + take: Int
     })

Argument `take` must not be null.
2025-03-11T06:47:31.968Z [ERROR]: [GET] /api/products?sortBy=createdAt&order=desc - 
Invalid `prisma.product.findMany()` invocation in
E:\Full-Stack Developer\E-Commerce Project 1.1\backend\src\controllers\productController.js:37:43

  34 const pageSize = parseInt(limit, 10) || null;
  35 const skip = (pageNumber - 1) * pageSize;
  36 
→ 37 const products = await prisma.product.findMany({
       where: {},
       orderBy: {
         createdAt: "desc"
       },
       skip: 0,
       include: {
         reviews: {
           select: {
             rating: true
           }
         },
         category: true
       },
     + take: Int
     })

Argument `take` must not be null.
2025-03-11T06:47:32.785Z [ERROR]: [GET] /api/products?sortBy=createdAt&order=desc - 
Invalid `prisma.product.findMany()` invocation in
E:\Full-Stack Developer\E-Commerce Project 1.1\backend\src\controllers\productController.js:37:43

  34 const pageSize = parseInt(limit, 10) || null;
  35 const skip = (pageNumber - 1) * pageSize;
  36 
→ 37 const products = await prisma.product.findMany({
       where: {},
       orderBy: {
         createdAt: "desc"
       },
       skip: 0,
       include: {
         reviews: {
           select: {
             rating: true
           }
         },
         category: true
       },
     + take: Int
     })

Argument `take` must not be null.
2025-03-11T06:47:57.518Z [ERROR]: [GET] /api/products?sortBy=createdAt&order=desc - 
Invalid `prisma.product.findMany()` invocation in
E:\Full-Stack Developer\E-Commerce Project 1.1\backend\src\controllers\productController.js:37:43

  34 const pageSize = parseInt(limit, 10) || null;
  35 const skip = (pageNumber - 1) * pageSize;
  36 
→ 37 const products = await prisma.product.findMany({
       where: {},
       orderBy: {
         createdAt: "desc"
       },
       skip: 0,
       include: {
         reviews: {
           select: {
             rating: true
           }
         },
         category: true
       },
     + take: Int
     })

Argument `take` must not be null.
2025-03-11T06:47:58.631Z [ERROR]: [GET] /api/products?sortBy=createdAt&order=desc - 
Invalid `prisma.product.findMany()` invocation in
E:\Full-Stack Developer\E-Commerce Project 1.1\backend\src\controllers\productController.js:37:43

  34 const pageSize = parseInt(limit, 10) || null;
  35 const skip = (pageNumber - 1) * pageSize;
  36 
→ 37 const products = await prisma.product.findMany({
       where: {},
       orderBy: {
         createdAt: "desc"
       },
       skip: 0,
       include: {
         reviews: {
           select: {
             rating: true
           }
         },
         category: true
       },
     + take: Int
     })

Argument `take` must not be null.
2025-03-11T06:47:59.472Z [ERROR]: [GET] /api/products?sortBy=createdAt&order=desc - 
Invalid `prisma.product.findMany()` invocation in
E:\Full-Stack Developer\E-Commerce Project 1.1\backend\src\controllers\productController.js:37:43

  34 const pageSize = parseInt(limit, 10) || null;
  35 const skip = (pageNumber - 1) * pageSize;
  36 
→ 37 const products = await prisma.product.findMany({
       where: {},
       orderBy: {
         createdAt: "desc"
       },
       skip: 0,
       include: {
         reviews: {
           select: {
             rating: true
           }
         },
         category: true
       },
     + take: Int
     })

Argument `take` must not be null.
2025-03-11T06:48:15.251Z [ERROR]: [GET] /api/products?sortBy=createdAt&order=desc - 
Invalid `prisma.product.findMany()` invocation in
E:\Full-Stack Developer\E-Commerce Project 1.1\backend\src\controllers\productController.js:37:43

  34 const pageSize = parseInt(limit, 10) || Infinity;
  35 const skip = (pageNumber - 1) * pageSize;
  36 
→ 37 const products = await prisma.product.findMany({
       where: {},
       orderBy: {
         createdAt: "desc"
       },
       skip: NaN,
       include: {
         reviews: {
           select: {
             rating: true
           }
         },
         category: true
       },
     + take: Int
     })

Argument `take` is missing.
2025-03-11T06:48:17.284Z [ERROR]: [GET] /api/products?sortBy=createdAt&order=desc - 
Invalid `prisma.product.findMany()` invocation in
E:\Full-Stack Developer\E-Commerce Project 1.1\backend\src\controllers\productController.js:37:43

  34 const pageSize = parseInt(limit, 10) || Infinity;
  35 const skip = (pageNumber - 1) * pageSize;
  36 
→ 37 const products = await prisma.product.findMany({
       where: {},
       orderBy: {
         createdAt: "desc"
       },
       skip: NaN,
       include: {
         reviews: {
           select: {
             rating: true
           }
         },
         category: true
       },
     + take: Int
     })

Argument `take` is missing.
2025-03-11T06:48:17.864Z [ERROR]: [GET] /api/products?sortBy=createdAt&order=desc - 
Invalid `prisma.product.findMany()` invocation in
E:\Full-Stack Developer\E-Commerce Project 1.1\backend\src\controllers\productController.js:37:43

  34 const pageSize = parseInt(limit, 10) || Infinity;
  35 const skip = (pageNumber - 1) * pageSize;
  36 
→ 37 const products = await prisma.product.findMany({
       where: {},
       orderBy: {
         createdAt: "desc"
       },
       skip: NaN,
       include: {
         reviews: {
           select: {
             rating: true
           }
         },
         category: true
       },
     + take: Int
     })

Argument `take` is missing.
2025-03-11T06:57:11.399Z [ERROR]: [GET] /api/products - pageSize is not defined
2025-03-11T06:57:11.674Z [ERROR]: [GET] /api/products?sortBy=createdAt&order=desc&page=1&limit=12 - pageSize is not defined
2025-03-11T06:57:11.690Z [ERROR]: [GET] /api/products - pageSize is not defined
2025-03-11T06:57:11.762Z [ERROR]: [GET] /api/products?sortBy=createdAt&order=desc&page=1&limit=12 - pageSize is not defined
2025-03-11T06:57:11.850Z [ERROR]: [GET] /api/products - pageSize is not defined
2025-03-11T06:57:11.880Z [ERROR]: [GET] /api/products?sortBy=createdAt&order=desc&page=1&limit=15 - pageSize is not defined
2025-03-11T06:57:13.054Z [ERROR]: [GET] /api/products - pageSize is not defined
2025-03-11T06:57:13.676Z [ERROR]: [GET] /api/products?sortBy=createdAt&order=desc&page=1&limit=12 - pageSize is not defined
2025-03-11T06:57:13.689Z [ERROR]: [GET] /api/products - pageSize is not defined
2025-03-11T06:57:13.759Z [ERROR]: [GET] /api/products?sortBy=createdAt&order=desc&page=1&limit=12 - pageSize is not defined
2025-03-11T06:57:13.766Z [ERROR]: [GET] /api/products - pageSize is not defined
2025-03-11T06:57:13.982Z [ERROR]: [GET] /api/products?sortBy=createdAt&order=desc&page=1&limit=16 - pageSize is not defined
2025-03-11T06:57:15.367Z [ERROR]: [GET] /api/products - pageSize is not defined
2025-03-11T06:57:15.502Z [ERROR]: [GET] /api/products?sortBy=createdAt&order=desc&page=1&limit=12 - pageSize is not defined
2025-03-11T06:57:15.510Z [ERROR]: [GET] /api/products - pageSize is not defined
2025-03-11T06:57:15.590Z [ERROR]: [GET] /api/products?sortBy=createdAt&order=desc&page=1&limit=12 - pageSize is not defined
2025-03-11T06:57:15.615Z [ERROR]: [GET] /api/products - pageSize is not defined
2025-03-11T06:57:15.897Z [ERROR]: [GET] /api/products?sortBy=createdAt&order=desc&page=1&limit=20 - pageSize is not defined
2025-03-11T09:05:10.766Z [ERROR]: [GET] /api/hero-images - 
Invalid `prisma.heroImage.findMany()` invocation in
E:\Full-Stack Developer\E-Commerce Project 1.1\backend\src\controllers\heroImageController.js:26:47

  23 // Get All Hero Images
  24 exports.getHeroImages = async (req, res, next) => {
  25   try {
→ 26     const heroImages = await prisma.heroImage.findMany(
Database `tesdb5` does not exist on the database server at `localhost:5432`.
2025-03-11T09:05:10.780Z [ERROR]: [GET] /api/products - 
Invalid `prisma.product.findMany()` invocation in
E:\Full-Stack Developer\E-Commerce Project 1.1\backend\src\controllers\productController.js:37:43

  34 const pageSize = limit ? parseInt(limit, 10) : undefined; // Jika tidak ada limit, ambil semua data
  35 const skip = (pageNumber - 1) * (pageSize || 10); // Skip tetap diperhitungkan untuk pagination
  36 
→ 37 const products = await prisma.product.findMany(
Database `tesdb5` does not exist on the database server at `localhost:5432`.
2025-03-11T09:05:11.069Z [ERROR]: [GET] /api/categories - 
Invalid `prisma.category.findMany()` invocation in
E:\Full-Stack Developer\E-Commerce Project 1.1\backend\src\controllers\categoryController.js:26:46

  23 
  24 exports.getAllCategories = async (req, res, next) => {
  25   try {
→ 26     const categories = await prisma.category.findMany(
Database `tesdb5` does not exist on the database server at `localhost:5432`.
2025-03-11T09:05:11.074Z [ERROR]: [GET] /api/products?sortBy=createdAt&order=desc&page=1&limit=20 - 
Invalid `prisma.product.findMany()` invocation in
E:\Full-Stack Developer\E-Commerce Project 1.1\backend\src\controllers\productController.js:37:43

  34 const pageSize = limit ? parseInt(limit, 10) : undefined; // Jika tidak ada limit, ambil semua data
  35 const skip = (pageNumber - 1) * (pageSize || 10); // Skip tetap diperhitungkan untuk pagination
  36 
→ 37 const products = await prisma.product.findMany(
Database `tesdb5` does not exist on the database server at `localhost:5432`.
2025-03-11T09:05:11.086Z [ERROR]: [GET] /api/products - 
Invalid `prisma.product.findMany()` invocation in
E:\Full-Stack Developer\E-Commerce Project 1.1\backend\src\controllers\productController.js:37:43

  34 const pageSize = limit ? parseInt(limit, 10) : undefined; // Jika tidak ada limit, ambil semua data
  35 const skip = (pageNumber - 1) * (pageSize || 10); // Skip tetap diperhitungkan untuk pagination
  36 
→ 37 const products = await prisma.product.findMany(
Database `tesdb5` does not exist on the database server at `localhost:5432`.
2025-03-11T09:05:11.091Z [ERROR]: [GET] /api/reviews - 
Invalid `prisma.review.findMany()` invocation in
E:\Full-Stack Developer\E-Commerce Project 1.1\backend\src\controllers\reviewController.js:40:41

  37 
  38 exports.getAllReviews = async (req, res, next) => {
  39   try {
→ 40     const reviews = await prisma.review.findMany(
Database `tesdb5` does not exist on the database server at `localhost:5432`.
2025-03-11T09:05:11.101Z [ERROR]: [GET] /api/articles?limit=3&sortBy=createdAt&order=desc - 
Invalid `prisma.article.findMany()` invocation in
E:\Full-Stack Developer\E-Commerce Project 1.1\backend\src\controllers\articleController.js:69:43

  66   };
  67 }
  68 
→ 69 const articles = await prisma.article.findMany(
Database `tesdb5` does not exist on the database server at `localhost:5432`.
2025-03-11T09:05:11.371Z [ERROR]: [GET] /api/categories - 
Invalid `prisma.category.findMany()` invocation in
E:\Full-Stack Developer\E-Commerce Project 1.1\backend\src\controllers\categoryController.js:26:46

  23 
  24 exports.getAllCategories = async (req, res, next) => {
  25   try {
→ 26     const categories = await prisma.category.findMany(
Database `tesdb5` does not exist on the database server at `localhost:5432`.
2025-03-11T09:05:11.375Z [ERROR]: [GET] /api/products?sortBy=createdAt&order=desc&page=1&limit=20 - 
Invalid `prisma.product.findMany()` invocation in
E:\Full-Stack Developer\E-Commerce Project 1.1\backend\src\controllers\productController.js:37:43

  34 const pageSize = limit ? parseInt(limit, 10) : undefined; // Jika tidak ada limit, ambil semua data
  35 const skip = (pageNumber - 1) * (pageSize || 10); // Skip tetap diperhitungkan untuk pagination
  36 
→ 37 const products = await prisma.product.findMany(
Database `tesdb5` does not exist on the database server at `localhost:5432`.
2025-03-11T09:05:11.383Z [ERROR]: [GET] /api/products - 
Invalid `prisma.product.findMany()` invocation in
E:\Full-Stack Developer\E-Commerce Project 1.1\backend\src\controllers\productController.js:37:43

  34 const pageSize = limit ? parseInt(limit, 10) : undefined; // Jika tidak ada limit, ambil semua data
  35 const skip = (pageNumber - 1) * (pageSize || 10); // Skip tetap diperhitungkan untuk pagination
  36 
→ 37 const products = await prisma.product.findMany(
Database `tesdb5` does not exist on the database server at `localhost:5432`.
2025-03-11T09:05:11.402Z [ERROR]: [GET] /api/reviews - 
Invalid `prisma.review.findMany()` invocation in
E:\Full-Stack Developer\E-Commerce Project 1.1\backend\src\controllers\reviewController.js:40:41

  37 
  38 exports.getAllReviews = async (req, res, next) => {
  39   try {
→ 40     const reviews = await prisma.review.findMany(
Database `tesdb5` does not exist on the database server at `localhost:5432`.
2025-03-11T09:05:11.414Z [ERROR]: [GET] /api/articles?limit=3&sortBy=createdAt&order=desc - 
Invalid `prisma.article.findMany()` invocation in
E:\Full-Stack Developer\E-Commerce Project 1.1\backend\src\controllers\articleController.js:69:43

  66   };
  67 }
  68 
→ 69 const articles = await prisma.article.findMany(
Database `tesdb5` does not exist on the database server at `localhost:5432`.
2025-03-11T09:05:24.084Z [ERROR]: [GET] /api/products?sortBy=createdAt&order=desc&page=1&limit=15 - 
Invalid `prisma.product.findMany()` invocation in
E:\Full-Stack Developer\E-Commerce Project 1.1\backend\src\controllers\productController.js:37:43

  34 const pageSize = limit ? parseInt(limit, 10) : undefined; // Jika tidak ada limit, ambil semua data
  35 const skip = (pageNumber - 1) * (pageSize || 10); // Skip tetap diperhitungkan untuk pagination
  36 
→ 37 const products = await prisma.product.findMany(
Database `tesdb5` does not exist on the database server at `localhost:5432`.
2025-03-11T09:05:31.710Z [ERROR]: [GET] /api/auth/google/callback?code=4%2F0AQSTgQEvSpmsg-TssCbB59jb5KLafeq1sEJjTb4v0l9B7TmdODLJWvPkNt1un0OVWdCWXw&scope=email+profile+https%3A%2F%2Fwww.googleapis.com%2Fauth%2Fuserinfo.profile+openid+https%3A%2F%2Fwww.googleapis.com%2Fauth%2Fuserinfo.email&authuser=0&prompt=none - 
Invalid `prisma.user.findUnique()` invocation in
E:\Full-Stack Developer\E-Commerce Project 1.1\backend\src\utils\passport.js:29:38

  26 try {
  27   const email = profile.emails[0].value;
  28   // Cek apakah user sudah ada
→ 29   let user = await prisma.user.findUnique(
Database `tesdb5` does not exist on the database server at `localhost:5432`.
